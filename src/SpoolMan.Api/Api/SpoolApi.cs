// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using SpoolMan.Api.Client;
using SpoolMan.Api.Model;
using System.Diagnostics.CodeAnalysis;

namespace SpoolMan.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISpoolApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SpoolApiEvents Events { get; }

        /// <summary>
        /// Add Spool
        /// </summary>
        /// <remarks>
        /// Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddSpoolSpoolPostApiResponse"/>&gt;</returns>
        Task<IAddSpoolSpoolPostApiResponse> AddSpoolSpoolPostAsync(SpoolParameters spoolParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Spool
        /// </summary>
        /// <remarks>
        /// Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </remarks>
        /// <param name="spoolParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddSpoolSpoolPostApiResponse"/>?&gt;</returns>
        Task<IAddSpoolSpoolPostApiResponse?> AddSpoolSpoolPostOrDefaultAsync(SpoolParameters spoolParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Spool
        /// </summary>
        /// <remarks>
        /// Delete a spool.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSpoolSpoolSpoolIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteSpoolSpoolSpoolIdDeleteApiResponse> DeleteSpoolSpoolSpoolIdDeleteAsync(int spoolId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Spool
        /// </summary>
        /// <remarks>
        /// Delete a spool.
        /// </remarks>
        /// <param name="spoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSpoolSpoolSpoolIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteSpoolSpoolSpoolIdDeleteApiResponse?> DeleteSpoolSpoolSpoolIdDeleteOrDefaultAsync(int spoolId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Spool
        /// </summary>
        /// <remarks>
        /// Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentName">See filament.name. (optional) (deprecated)</param>
        /// <param name="filamentId">See filament.id. (optional) (deprecated)</param>
        /// <param name="filamentMaterial">See filament.material. (optional) (deprecated)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional) (deprecated)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpoolSpoolGetApiResponse"/>&gt;</returns>
        Task<IFindSpoolSpoolGetApiResponse> FindSpoolSpoolGetAsync(Option<string?> filamentName = default, Option<string?> filamentId = default, Option<string?> filamentMaterial = default, Option<string?> vendorName = default, Option<string?> vendorId = default, Option<string?> filamentName2 = default, Option<string?> filamentId2 = default, Option<string?> filamentMaterial2 = default, Option<string?> filamentVendorName = default, Option<string?> filamentVendorId = default, Option<string?> location = default, Option<string?> lotNr = default, Option<bool> allowArchived = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Spool
        /// </summary>
        /// <remarks>
        /// Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <param name="filamentName">See filament.name. (optional) (deprecated)</param>
        /// <param name="filamentId">See filament.id. (optional) (deprecated)</param>
        /// <param name="filamentMaterial">See filament.material. (optional) (deprecated)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional) (deprecated)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpoolSpoolGetApiResponse"/>?&gt;</returns>
        Task<IFindSpoolSpoolGetApiResponse?> FindSpoolSpoolGetOrDefaultAsync(Option<string?> filamentName = default, Option<string?> filamentId = default, Option<string?> filamentMaterial = default, Option<string?> vendorName = default, Option<string?> vendorId = default, Option<string?> filamentName2 = default, Option<string?> filamentId2 = default, Option<string?> filamentMaterial2 = default, Option<string?> filamentVendorName = default, Option<string?> filamentVendorId = default, Option<string?> location = default, Option<string?> lotNr = default, Option<bool> allowArchived = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Spool
        /// </summary>
        /// <remarks>
        /// Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSpoolSpoolSpoolIdGetApiResponse"/>&gt;</returns>
        Task<IGetSpoolSpoolSpoolIdGetApiResponse> GetSpoolSpoolSpoolIdGetAsync(int spoolId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Spool
        /// </summary>
        /// <remarks>
        /// Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <param name="spoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSpoolSpoolSpoolIdGetApiResponse"/>?&gt;</returns>
        Task<IGetSpoolSpoolSpoolIdGetApiResponse?> GetSpoolSpoolSpoolIdGetOrDefaultAsync(int spoolId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Spool
        /// </summary>
        /// <remarks>
        /// Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSpoolSpoolSpoolIdPatchApiResponse"/>&gt;</returns>
        Task<IUpdateSpoolSpoolSpoolIdPatchApiResponse> UpdateSpoolSpoolSpoolIdPatchAsync(int spoolId, SpoolUpdateParameters spoolUpdateParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Spool
        /// </summary>
        /// <remarks>
        /// Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSpoolSpoolSpoolIdPatchApiResponse"/>?&gt;</returns>
        Task<IUpdateSpoolSpoolSpoolIdPatchApiResponse?> UpdateSpoolSpoolSpoolIdPatchOrDefaultAsync(int spoolId, SpoolUpdateParameters spoolUpdateParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement
        /// </summary>
        /// <remarks>
        /// Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse"/>&gt;</returns>
        Task<IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse> UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutAsync(int spoolId, SpoolMeasureParameters spoolMeasureParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement
        /// </summary>
        /// <remarks>
        /// Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </remarks>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse"/>?&gt;</returns>
        Task<IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse?> UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutOrDefaultAsync(int spoolId, SpoolMeasureParameters spoolMeasureParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Use Spool Filament
        /// </summary>
        /// <remarks>
        /// Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse"/>&gt;</returns>
        Task<IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse> UseSpoolFilamentSpoolSpoolIdUsePutAsync(int spoolId, SpoolUseParameters spoolUseParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Use Spool Filament
        /// </summary>
        /// <remarks>
        /// Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </remarks>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse"/>?&gt;</returns>
        Task<IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse?> UseSpoolFilamentSpoolSpoolIdUsePutOrDefaultAsync(int spoolId, SpoolUseParameters spoolUseParameters, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddSpoolSpoolPostApiResponse"/>
    /// </summary>
    public interface IAddSpoolSpoolPostApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Spool?>, IBadRequest<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSpoolSpoolSpoolIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteSpoolSpoolSpoolIdDeleteApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Message?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IFindSpoolSpoolGetApiResponse"/>
    /// </summary>
    public interface IFindSpoolSpoolGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<List<Spool>?>, ICustomHttpStatusCode299<SpoolMan.Api.Model.SpoolEvent?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 299 CustomHttpStatusCode299
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode299 { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetSpoolSpoolSpoolIdGetApiResponse"/>
    /// </summary>
    public interface IGetSpoolSpoolSpoolIdGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Spool?>, ICustomHttpStatusCode299<SpoolMan.Api.Model.SpoolEvent?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 299 CustomHttpStatusCode299
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode299 { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateSpoolSpoolSpoolIdPatchApiResponse"/>
    /// </summary>
    public interface IUpdateSpoolSpoolSpoolIdPatchApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Spool?>, IBadRequest<SpoolMan.Api.Model.Message?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse"/>
    /// </summary>
    public interface IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Spool?>, IBadRequest<SpoolMan.Api.Model.Message?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse"/>
    /// </summary>
    public interface IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Spool?>, IBadRequest<SpoolMan.Api.Model.Message?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SpoolApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddSpoolSpoolPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddSpoolSpoolPost;

        internal void ExecuteOnAddSpoolSpoolPost(SpoolApi.AddSpoolSpoolPostApiResponse apiResponse)
        {
            OnAddSpoolSpoolPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddSpoolSpoolPost(Exception exception)
        {
            OnErrorAddSpoolSpoolPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteSpoolSpoolSpoolIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteSpoolSpoolSpoolIdDelete;

        internal void ExecuteOnDeleteSpoolSpoolSpoolIdDelete(SpoolApi.DeleteSpoolSpoolSpoolIdDeleteApiResponse apiResponse)
        {
            OnDeleteSpoolSpoolSpoolIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSpoolSpoolSpoolIdDelete(Exception exception)
        {
            OnErrorDeleteSpoolSpoolSpoolIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindSpoolSpoolGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindSpoolSpoolGet;

        internal void ExecuteOnFindSpoolSpoolGet(SpoolApi.FindSpoolSpoolGetApiResponse apiResponse)
        {
            OnFindSpoolSpoolGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindSpoolSpoolGet(Exception exception)
        {
            OnErrorFindSpoolSpoolGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSpoolSpoolSpoolIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSpoolSpoolSpoolIdGet;

        internal void ExecuteOnGetSpoolSpoolSpoolIdGet(SpoolApi.GetSpoolSpoolSpoolIdGetApiResponse apiResponse)
        {
            OnGetSpoolSpoolSpoolIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSpoolSpoolSpoolIdGet(Exception exception)
        {
            OnErrorGetSpoolSpoolSpoolIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateSpoolSpoolSpoolIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateSpoolSpoolSpoolIdPatch;

        internal void ExecuteOnUpdateSpoolSpoolSpoolIdPatch(SpoolApi.UpdateSpoolSpoolSpoolIdPatchApiResponse apiResponse)
        {
            OnUpdateSpoolSpoolSpoolIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateSpoolSpoolSpoolIdPatch(Exception exception)
        {
            OnErrorUpdateSpoolSpoolSpoolIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut;

        internal void ExecuteOnUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(SpoolApi.UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse apiResponse)
        {
            OnUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(Exception exception)
        {
            OnErrorUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUseSpoolFilamentSpoolSpoolIdUsePut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUseSpoolFilamentSpoolSpoolIdUsePut;

        internal void ExecuteOnUseSpoolFilamentSpoolSpoolIdUsePut(SpoolApi.UseSpoolFilamentSpoolSpoolIdUsePutApiResponse apiResponse)
        {
            OnUseSpoolFilamentSpoolSpoolIdUsePut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUseSpoolFilamentSpoolSpoolIdUsePut(Exception exception)
        {
            OnErrorUseSpoolFilamentSpoolSpoolIdUsePut?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SpoolApi : ISpoolApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SpoolApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SpoolApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpoolApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpoolApi(ILogger<SpoolApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SpoolApiEvents spoolApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SpoolApi>();
            HttpClient = httpClient;
            Events = spoolApiEvents;
        }

        partial void FormatAddSpoolSpoolPost(SpoolParameters spoolParameters);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="spoolParameters"></param>
        /// <returns></returns>
        private void ValidateAddSpoolSpoolPost(SpoolParameters spoolParameters)
        {
            if (spoolParameters == null)
                throw new ArgumentNullException(nameof(spoolParameters));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolParameters"></param>
        private void AfterAddSpoolSpoolPostDefaultImplementation(IAddSpoolSpoolPostApiResponse apiResponseLocalVar, SpoolParameters spoolParameters)
        {
            bool suppressDefaultLog = false;
            AfterAddSpoolSpoolPost(ref suppressDefaultLog, apiResponseLocalVar, spoolParameters);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolParameters"></param>
        partial void AfterAddSpoolSpoolPost(ref bool suppressDefaultLog, IAddSpoolSpoolPostApiResponse apiResponseLocalVar, SpoolParameters spoolParameters);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolParameters"></param>
        private void OnErrorAddSpoolSpoolPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SpoolParameters spoolParameters)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddSpoolSpoolPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, spoolParameters);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolParameters"></param>
        partial void OnErrorAddSpoolSpoolPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SpoolParameters spoolParameters);

        /// <summary>
        /// Add Spool Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </summary>
        /// <param name="spoolParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddSpoolSpoolPostApiResponse"/>&gt;</returns>
        public async Task<IAddSpoolSpoolPostApiResponse?> AddSpoolSpoolPostOrDefaultAsync(SpoolParameters spoolParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddSpoolSpoolPostAsync(spoolParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Spool Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddSpoolSpoolPostApiResponse"/>&gt;</returns>
        public async Task<IAddSpoolSpoolPostApiResponse> AddSpoolSpoolPostAsync(SpoolParameters spoolParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddSpoolSpoolPost(spoolParameters);

                FormatAddSpoolSpoolPost(spoolParameters);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/spool");

                    httpRequestMessageLocalVar.Content = (spoolParameters as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(spoolParameters, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddSpoolSpoolPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddSpoolSpoolPostApiResponse>();

                        AddSpoolSpoolPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/spool", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddSpoolSpoolPostDefaultImplementation(apiResponseLocalVar, spoolParameters);

                        Events.ExecuteOnAddSpoolSpoolPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddSpoolSpoolPostDefaultImplementation(e, "/spool", uriBuilderLocalVar.Path, spoolParameters);
                Events.ExecuteOnErrorAddSpoolSpoolPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddSpoolSpoolPostApiResponse"/>
        /// </summary>
        public partial class AddSpoolSpoolPostApiResponse : SpoolMan.Api.Client.ApiResponse, IAddSpoolSpoolPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddSpoolSpoolPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddSpoolSpoolPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddSpoolSpoolPostApiResponse(ILogger<AddSpoolSpoolPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Spool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Spool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Spool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSpoolSpoolSpoolIdDelete(ref int spoolId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolId"></param>
        private void AfterDeleteSpoolSpoolSpoolIdDeleteDefaultImplementation(IDeleteSpoolSpoolSpoolIdDeleteApiResponse apiResponseLocalVar, int spoolId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSpoolSpoolSpoolIdDelete(ref suppressDefaultLog, apiResponseLocalVar, spoolId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolId"></param>
        partial void AfterDeleteSpoolSpoolSpoolIdDelete(ref bool suppressDefaultLog, IDeleteSpoolSpoolSpoolIdDeleteApiResponse apiResponseLocalVar, int spoolId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolId"></param>
        private void OnErrorDeleteSpoolSpoolSpoolIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int spoolId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSpoolSpoolSpoolIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, spoolId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolId"></param>
        partial void OnErrorDeleteSpoolSpoolSpoolIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int spoolId);

        /// <summary>
        /// Delete Spool Delete a spool.
        /// </summary>
        /// <param name="spoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSpoolSpoolSpoolIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteSpoolSpoolSpoolIdDeleteApiResponse?> DeleteSpoolSpoolSpoolIdDeleteOrDefaultAsync(int spoolId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSpoolSpoolSpoolIdDeleteAsync(spoolId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Spool Delete a spool.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSpoolSpoolSpoolIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteSpoolSpoolSpoolIdDeleteApiResponse> DeleteSpoolSpoolSpoolIdDeleteAsync(int spoolId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteSpoolSpoolSpoolIdDelete(ref spoolId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/spool/{spool_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bspool_id%7D", Uri.EscapeDataString(spoolId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteSpoolSpoolSpoolIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSpoolSpoolSpoolIdDeleteApiResponse>();

                        DeleteSpoolSpoolSpoolIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/spool/{spool_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSpoolSpoolSpoolIdDeleteDefaultImplementation(apiResponseLocalVar, spoolId);

                        Events.ExecuteOnDeleteSpoolSpoolSpoolIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSpoolSpoolSpoolIdDeleteDefaultImplementation(e, "/spool/{spool_id}", uriBuilderLocalVar.Path, spoolId);
                Events.ExecuteOnErrorDeleteSpoolSpoolSpoolIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSpoolSpoolSpoolIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteSpoolSpoolSpoolIdDeleteApiResponse : SpoolMan.Api.Client.ApiResponse, IDeleteSpoolSpoolSpoolIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSpoolSpoolSpoolIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSpoolSpoolSpoolIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSpoolSpoolSpoolIdDeleteApiResponse(ILogger<DeleteSpoolSpoolSpoolIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindSpoolSpoolGet(ref Option<string?> filamentName, ref Option<string?> filamentId, ref Option<string?> filamentMaterial, ref Option<string?> vendorName, ref Option<string?> vendorId, ref Option<string?> filamentName2, ref Option<string?> filamentId2, ref Option<string?> filamentMaterial2, ref Option<string?> filamentVendorName, ref Option<string?> filamentVendorId, ref Option<string?> location, ref Option<string?> lotNr, ref Option<bool> allowArchived, ref Option<string?> sort, ref Option<int?> limit, ref Option<int> offset);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filamentName"></param>
        /// <param name="filamentId"></param>
        /// <param name="filamentMaterial"></param>
        /// <param name="vendorName"></param>
        /// <param name="vendorId"></param>
        /// <param name="filamentName2"></param>
        /// <param name="filamentId2"></param>
        /// <param name="filamentMaterial2"></param>
        /// <param name="filamentVendorName"></param>
        /// <param name="filamentVendorId"></param>
        /// <param name="location"></param>
        /// <param name="lotNr"></param>
        /// <param name="allowArchived"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterFindSpoolSpoolGetDefaultImplementation(IFindSpoolSpoolGetApiResponse apiResponseLocalVar, Option<string?> filamentName, Option<string?> filamentId, Option<string?> filamentMaterial, Option<string?> vendorName, Option<string?> vendorId, Option<string?> filamentName2, Option<string?> filamentId2, Option<string?> filamentMaterial2, Option<string?> filamentVendorName, Option<string?> filamentVendorId, Option<string?> location, Option<string?> lotNr, Option<bool> allowArchived, Option<string?> sort, Option<int?> limit, Option<int> offset)
        {
            bool suppressDefaultLog = false;
            AfterFindSpoolSpoolGet(ref suppressDefaultLog, apiResponseLocalVar, filamentName, filamentId, filamentMaterial, vendorName, vendorId, filamentName2, filamentId2, filamentMaterial2, filamentVendorName, filamentVendorId, location, lotNr, allowArchived, sort, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filamentName"></param>
        /// <param name="filamentId"></param>
        /// <param name="filamentMaterial"></param>
        /// <param name="vendorName"></param>
        /// <param name="vendorId"></param>
        /// <param name="filamentName2"></param>
        /// <param name="filamentId2"></param>
        /// <param name="filamentMaterial2"></param>
        /// <param name="filamentVendorName"></param>
        /// <param name="filamentVendorId"></param>
        /// <param name="location"></param>
        /// <param name="lotNr"></param>
        /// <param name="allowArchived"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterFindSpoolSpoolGet(ref bool suppressDefaultLog, IFindSpoolSpoolGetApiResponse apiResponseLocalVar, Option<string?> filamentName, Option<string?> filamentId, Option<string?> filamentMaterial, Option<string?> vendorName, Option<string?> vendorId, Option<string?> filamentName2, Option<string?> filamentId2, Option<string?> filamentMaterial2, Option<string?> filamentVendorName, Option<string?> filamentVendorId, Option<string?> location, Option<string?> lotNr, Option<bool> allowArchived, Option<string?> sort, Option<int?> limit, Option<int> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filamentName"></param>
        /// <param name="filamentId"></param>
        /// <param name="filamentMaterial"></param>
        /// <param name="vendorName"></param>
        /// <param name="vendorId"></param>
        /// <param name="filamentName2"></param>
        /// <param name="filamentId2"></param>
        /// <param name="filamentMaterial2"></param>
        /// <param name="filamentVendorName"></param>
        /// <param name="filamentVendorId"></param>
        /// <param name="location"></param>
        /// <param name="lotNr"></param>
        /// <param name="allowArchived"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorFindSpoolSpoolGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> filamentName, Option<string?> filamentId, Option<string?> filamentMaterial, Option<string?> vendorName, Option<string?> vendorId, Option<string?> filamentName2, Option<string?> filamentId2, Option<string?> filamentMaterial2, Option<string?> filamentVendorName, Option<string?> filamentVendorId, Option<string?> location, Option<string?> lotNr, Option<bool> allowArchived, Option<string?> sort, Option<int?> limit, Option<int> offset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindSpoolSpoolGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, filamentName, filamentId, filamentMaterial, vendorName, vendorId, filamentName2, filamentId2, filamentMaterial2, filamentVendorName, filamentVendorId, location, lotNr, allowArchived, sort, limit, offset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filamentName"></param>
        /// <param name="filamentId"></param>
        /// <param name="filamentMaterial"></param>
        /// <param name="vendorName"></param>
        /// <param name="vendorId"></param>
        /// <param name="filamentName2"></param>
        /// <param name="filamentId2"></param>
        /// <param name="filamentMaterial2"></param>
        /// <param name="filamentVendorName"></param>
        /// <param name="filamentVendorId"></param>
        /// <param name="location"></param>
        /// <param name="lotNr"></param>
        /// <param name="allowArchived"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorFindSpoolSpoolGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> filamentName, Option<string?> filamentId, Option<string?> filamentMaterial, Option<string?> vendorName, Option<string?> vendorId, Option<string?> filamentName2, Option<string?> filamentId2, Option<string?> filamentMaterial2, Option<string?> filamentVendorName, Option<string?> filamentVendorId, Option<string?> location, Option<string?> lotNr, Option<bool> allowArchived, Option<string?> sort, Option<int?> limit, Option<int> offset);

        /// <summary>
        /// Find Spool Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <param name="filamentName">See filament.name. (optional)</param>
        /// <param name="filamentId">See filament.id. (optional)</param>
        /// <param name="filamentMaterial">See filament.material. (optional)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpoolSpoolGetApiResponse"/>&gt;</returns>
        public async Task<IFindSpoolSpoolGetApiResponse?> FindSpoolSpoolGetOrDefaultAsync(Option<string?> filamentName = default, Option<string?> filamentId = default, Option<string?> filamentMaterial = default, Option<string?> vendorName = default, Option<string?> vendorId = default, Option<string?> filamentName2 = default, Option<string?> filamentId2 = default, Option<string?> filamentMaterial2 = default, Option<string?> filamentVendorName = default, Option<string?> filamentVendorId = default, Option<string?> location = default, Option<string?> lotNr = default, Option<bool> allowArchived = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindSpoolSpoolGetAsync(filamentName, filamentId, filamentMaterial, vendorName, vendorId, filamentName2, filamentId2, filamentMaterial2, filamentVendorName, filamentVendorId, location, lotNr, allowArchived, sort, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Find Spool Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentName">See filament.name. (optional)</param>
        /// <param name="filamentId">See filament.id. (optional)</param>
        /// <param name="filamentMaterial">See filament.material. (optional)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpoolSpoolGetApiResponse"/>&gt;</returns>
        public async Task<IFindSpoolSpoolGetApiResponse> FindSpoolSpoolGetAsync(Option<string?> filamentName = default, Option<string?> filamentId = default, Option<string?> filamentMaterial = default, Option<string?> vendorName = default, Option<string?> vendorId = default, Option<string?> filamentName2 = default, Option<string?> filamentId2 = default, Option<string?> filamentMaterial2 = default, Option<string?> filamentVendorName = default, Option<string?> filamentVendorId = default, Option<string?> location = default, Option<string?> lotNr = default, Option<bool> allowArchived = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatFindSpoolSpoolGet(ref filamentName, ref filamentId, ref filamentMaterial, ref vendorName, ref vendorId, ref filamentName2, ref filamentId2, ref filamentMaterial2, ref filamentVendorName, ref filamentVendorId, ref location, ref lotNr, ref allowArchived, ref sort, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/spool");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (filamentName.IsSet)
                        parseQueryStringLocalVar["filament_name"] = ClientUtils.ParameterToString(filamentName.Value);

                    if (filamentId.IsSet)
                        parseQueryStringLocalVar["filament_id"] = ClientUtils.ParameterToString(filamentId.Value);

                    if (filamentMaterial.IsSet)
                        parseQueryStringLocalVar["filament_material"] = ClientUtils.ParameterToString(filamentMaterial.Value);

                    if (vendorName.IsSet)
                        parseQueryStringLocalVar["vendor_name"] = ClientUtils.ParameterToString(vendorName.Value);

                    if (vendorId.IsSet)
                        parseQueryStringLocalVar["vendor_id"] = ClientUtils.ParameterToString(vendorId.Value);

                    if (filamentName2.IsSet)
                        parseQueryStringLocalVar["filament.name"] = ClientUtils.ParameterToString(filamentName2.Value);

                    if (filamentId2.IsSet)
                        parseQueryStringLocalVar["filament.id"] = ClientUtils.ParameterToString(filamentId2.Value);

                    if (filamentMaterial2.IsSet)
                        parseQueryStringLocalVar["filament.material"] = ClientUtils.ParameterToString(filamentMaterial2.Value);

                    if (filamentVendorName.IsSet)
                        parseQueryStringLocalVar["filament.vendor.name"] = ClientUtils.ParameterToString(filamentVendorName.Value);

                    if (filamentVendorId.IsSet)
                        parseQueryStringLocalVar["filament.vendor.id"] = ClientUtils.ParameterToString(filamentVendorId.Value);

                    if (location.IsSet)
                        parseQueryStringLocalVar["location"] = ClientUtils.ParameterToString(location.Value);

                    if (lotNr.IsSet)
                        parseQueryStringLocalVar["lot_nr"] = ClientUtils.ParameterToString(lotNr.Value);

                    if (allowArchived.IsSet)
                        parseQueryStringLocalVar["allow_archived"] = ClientUtils.ParameterToString(allowArchived.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindSpoolSpoolGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindSpoolSpoolGetApiResponse>();

                        FindSpoolSpoolGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/spool", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindSpoolSpoolGetDefaultImplementation(apiResponseLocalVar, filamentName, filamentId, filamentMaterial, vendorName, vendorId, filamentName2, filamentId2, filamentMaterial2, filamentVendorName, filamentVendorId, location, lotNr, allowArchived, sort, limit, offset);

                        Events.ExecuteOnFindSpoolSpoolGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindSpoolSpoolGetDefaultImplementation(e, "/spool", uriBuilderLocalVar.Path, filamentName, filamentId, filamentMaterial, vendorName, vendorId, filamentName2, filamentId2, filamentMaterial2, filamentVendorName, filamentVendorId, location, lotNr, allowArchived, sort, limit, offset);
                Events.ExecuteOnErrorFindSpoolSpoolGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindSpoolSpoolGetApiResponse"/>
        /// </summary>
        public partial class FindSpoolSpoolGetApiResponse : SpoolMan.Api.Client.ApiResponse, IFindSpoolSpoolGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindSpoolSpoolGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindSpoolSpoolGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindSpoolSpoolGetApiResponse(ILogger<FindSpoolSpoolGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Spool>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Spool>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Spool>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode299 => 299 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.SpoolEvent? CustomHttpStatusCode299()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode299
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.SpoolEvent>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299 and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode299([NotNullWhen(true)]out SpoolMan.Api.Model.SpoolEvent? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode299();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)299);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSpoolSpoolSpoolIdGet(ref int spoolId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolId"></param>
        private void AfterGetSpoolSpoolSpoolIdGetDefaultImplementation(IGetSpoolSpoolSpoolIdGetApiResponse apiResponseLocalVar, int spoolId)
        {
            bool suppressDefaultLog = false;
            AfterGetSpoolSpoolSpoolIdGet(ref suppressDefaultLog, apiResponseLocalVar, spoolId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolId"></param>
        partial void AfterGetSpoolSpoolSpoolIdGet(ref bool suppressDefaultLog, IGetSpoolSpoolSpoolIdGetApiResponse apiResponseLocalVar, int spoolId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolId"></param>
        private void OnErrorGetSpoolSpoolSpoolIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int spoolId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSpoolSpoolSpoolIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, spoolId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolId"></param>
        partial void OnErrorGetSpoolSpoolSpoolIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int spoolId);

        /// <summary>
        /// Get Spool Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <param name="spoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSpoolSpoolSpoolIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetSpoolSpoolSpoolIdGetApiResponse?> GetSpoolSpoolSpoolIdGetOrDefaultAsync(int spoolId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSpoolSpoolSpoolIdGetAsync(spoolId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Spool Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSpoolSpoolSpoolIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetSpoolSpoolSpoolIdGetApiResponse> GetSpoolSpoolSpoolIdGetAsync(int spoolId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetSpoolSpoolSpoolIdGet(ref spoolId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/spool/{spool_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bspool_id%7D", Uri.EscapeDataString(spoolId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSpoolSpoolSpoolIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSpoolSpoolSpoolIdGetApiResponse>();

                        GetSpoolSpoolSpoolIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/spool/{spool_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSpoolSpoolSpoolIdGetDefaultImplementation(apiResponseLocalVar, spoolId);

                        Events.ExecuteOnGetSpoolSpoolSpoolIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSpoolSpoolSpoolIdGetDefaultImplementation(e, "/spool/{spool_id}", uriBuilderLocalVar.Path, spoolId);
                Events.ExecuteOnErrorGetSpoolSpoolSpoolIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSpoolSpoolSpoolIdGetApiResponse"/>
        /// </summary>
        public partial class GetSpoolSpoolSpoolIdGetApiResponse : SpoolMan.Api.Client.ApiResponse, IGetSpoolSpoolSpoolIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSpoolSpoolSpoolIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSpoolSpoolSpoolIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSpoolSpoolSpoolIdGetApiResponse(ILogger<GetSpoolSpoolSpoolIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Spool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Spool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Spool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode299 => 299 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.SpoolEvent? CustomHttpStatusCode299()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode299
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.SpoolEvent>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299 and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode299([NotNullWhen(true)]out SpoolMan.Api.Model.SpoolEvent? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode299();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)299);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateSpoolSpoolSpoolIdPatch(ref int spoolId, SpoolUpdateParameters spoolUpdateParameters);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="spoolUpdateParameters"></param>
        /// <returns></returns>
        private void ValidateUpdateSpoolSpoolSpoolIdPatch(SpoolUpdateParameters spoolUpdateParameters)
        {
            if (spoolUpdateParameters == null)
                throw new ArgumentNullException(nameof(spoolUpdateParameters));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        private void AfterUpdateSpoolSpoolSpoolIdPatchDefaultImplementation(IUpdateSpoolSpoolSpoolIdPatchApiResponse apiResponseLocalVar, int spoolId, SpoolUpdateParameters spoolUpdateParameters)
        {
            bool suppressDefaultLog = false;
            AfterUpdateSpoolSpoolSpoolIdPatch(ref suppressDefaultLog, apiResponseLocalVar, spoolId, spoolUpdateParameters);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        partial void AfterUpdateSpoolSpoolSpoolIdPatch(ref bool suppressDefaultLog, IUpdateSpoolSpoolSpoolIdPatchApiResponse apiResponseLocalVar, int spoolId, SpoolUpdateParameters spoolUpdateParameters);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        private void OnErrorUpdateSpoolSpoolSpoolIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int spoolId, SpoolUpdateParameters spoolUpdateParameters)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateSpoolSpoolSpoolIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, spoolId, spoolUpdateParameters);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        partial void OnErrorUpdateSpoolSpoolSpoolIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int spoolId, SpoolUpdateParameters spoolUpdateParameters);

        /// <summary>
        /// Update Spool Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSpoolSpoolSpoolIdPatchApiResponse"/>&gt;</returns>
        public async Task<IUpdateSpoolSpoolSpoolIdPatchApiResponse?> UpdateSpoolSpoolSpoolIdPatchOrDefaultAsync(int spoolId, SpoolUpdateParameters spoolUpdateParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateSpoolSpoolSpoolIdPatchAsync(spoolId, spoolUpdateParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Spool Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSpoolSpoolSpoolIdPatchApiResponse"/>&gt;</returns>
        public async Task<IUpdateSpoolSpoolSpoolIdPatchApiResponse> UpdateSpoolSpoolSpoolIdPatchAsync(int spoolId, SpoolUpdateParameters spoolUpdateParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateSpoolSpoolSpoolIdPatch(spoolUpdateParameters);

                FormatUpdateSpoolSpoolSpoolIdPatch(ref spoolId, spoolUpdateParameters);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/spool/{spool_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bspool_id%7D", Uri.EscapeDataString(spoolId.ToString()));

                    httpRequestMessageLocalVar.Content = (spoolUpdateParameters as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(spoolUpdateParameters, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateSpoolSpoolSpoolIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateSpoolSpoolSpoolIdPatchApiResponse>();

                        UpdateSpoolSpoolSpoolIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/spool/{spool_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateSpoolSpoolSpoolIdPatchDefaultImplementation(apiResponseLocalVar, spoolId, spoolUpdateParameters);

                        Events.ExecuteOnUpdateSpoolSpoolSpoolIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateSpoolSpoolSpoolIdPatchDefaultImplementation(e, "/spool/{spool_id}", uriBuilderLocalVar.Path, spoolId, spoolUpdateParameters);
                Events.ExecuteOnErrorUpdateSpoolSpoolSpoolIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateSpoolSpoolSpoolIdPatchApiResponse"/>
        /// </summary>
        public partial class UpdateSpoolSpoolSpoolIdPatchApiResponse : SpoolMan.Api.Client.ApiResponse, IUpdateSpoolSpoolSpoolIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateSpoolSpoolSpoolIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateSpoolSpoolSpoolIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateSpoolSpoolSpoolIdPatchApiResponse(ILogger<UpdateSpoolSpoolSpoolIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Spool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Spool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Spool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(ref int spoolId, SpoolMeasureParameters spoolMeasureParameters);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="spoolMeasureParameters"></param>
        /// <returns></returns>
        private void ValidateUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(SpoolMeasureParameters spoolMeasureParameters)
        {
            if (spoolMeasureParameters == null)
                throw new ArgumentNullException(nameof(spoolMeasureParameters));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        private void AfterUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutDefaultImplementation(IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse apiResponseLocalVar, int spoolId, SpoolMeasureParameters spoolMeasureParameters)
        {
            bool suppressDefaultLog = false;
            AfterUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(ref suppressDefaultLog, apiResponseLocalVar, spoolId, spoolMeasureParameters);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        partial void AfterUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(ref bool suppressDefaultLog, IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse apiResponseLocalVar, int spoolId, SpoolMeasureParameters spoolMeasureParameters);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        private void OnErrorUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int spoolId, SpoolMeasureParameters spoolMeasureParameters)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, spoolId, spoolMeasureParameters);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        partial void OnErrorUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int spoolId, SpoolMeasureParameters spoolMeasureParameters);

        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </summary>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse"/>&gt;</returns>
        public async Task<IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse?> UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutOrDefaultAsync(int spoolId, SpoolMeasureParameters spoolMeasureParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutAsync(spoolId, spoolMeasureParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse"/>&gt;</returns>
        public async Task<IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse> UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutAsync(int spoolId, SpoolMeasureParameters spoolMeasureParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(spoolMeasureParameters);

                FormatUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(ref spoolId, spoolMeasureParameters);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/spool/{spool_id}/measure");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bspool_id%7D", Uri.EscapeDataString(spoolId.ToString()));

                    httpRequestMessageLocalVar.Content = (spoolMeasureParameters as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(spoolMeasureParameters, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse>();

                        UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/spool/{spool_id}/measure", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutDefaultImplementation(apiResponseLocalVar, spoolId, spoolMeasureParameters);

                        Events.ExecuteOnUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutDefaultImplementation(e, "/spool/{spool_id}/measure", uriBuilderLocalVar.Path, spoolId, spoolMeasureParameters);
                Events.ExecuteOnErrorUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse"/>
        /// </summary>
        public partial class UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse : SpoolMan.Api.Client.ApiResponse, IUseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse(ILogger<UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Spool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Spool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Spool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUseSpoolFilamentSpoolSpoolIdUsePut(ref int spoolId, SpoolUseParameters spoolUseParameters);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="spoolUseParameters"></param>
        /// <returns></returns>
        private void ValidateUseSpoolFilamentSpoolSpoolIdUsePut(SpoolUseParameters spoolUseParameters)
        {
            if (spoolUseParameters == null)
                throw new ArgumentNullException(nameof(spoolUseParameters));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        private void AfterUseSpoolFilamentSpoolSpoolIdUsePutDefaultImplementation(IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse apiResponseLocalVar, int spoolId, SpoolUseParameters spoolUseParameters)
        {
            bool suppressDefaultLog = false;
            AfterUseSpoolFilamentSpoolSpoolIdUsePut(ref suppressDefaultLog, apiResponseLocalVar, spoolId, spoolUseParameters);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        partial void AfterUseSpoolFilamentSpoolSpoolIdUsePut(ref bool suppressDefaultLog, IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse apiResponseLocalVar, int spoolId, SpoolUseParameters spoolUseParameters);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        private void OnErrorUseSpoolFilamentSpoolSpoolIdUsePutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int spoolId, SpoolUseParameters spoolUseParameters)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUseSpoolFilamentSpoolSpoolIdUsePut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, spoolId, spoolUseParameters);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        partial void OnErrorUseSpoolFilamentSpoolSpoolIdUsePut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int spoolId, SpoolUseParameters spoolUseParameters);

        /// <summary>
        /// Use Spool Filament Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </summary>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse"/>&gt;</returns>
        public async Task<IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse?> UseSpoolFilamentSpoolSpoolIdUsePutOrDefaultAsync(int spoolId, SpoolUseParameters spoolUseParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UseSpoolFilamentSpoolSpoolIdUsePutAsync(spoolId, spoolUseParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Use Spool Filament Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse"/>&gt;</returns>
        public async Task<IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse> UseSpoolFilamentSpoolSpoolIdUsePutAsync(int spoolId, SpoolUseParameters spoolUseParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUseSpoolFilamentSpoolSpoolIdUsePut(spoolUseParameters);

                FormatUseSpoolFilamentSpoolSpoolIdUsePut(ref spoolId, spoolUseParameters);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/spool/{spool_id}/use");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bspool_id%7D", Uri.EscapeDataString(spoolId.ToString()));

                    httpRequestMessageLocalVar.Content = (spoolUseParameters as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(spoolUseParameters, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UseSpoolFilamentSpoolSpoolIdUsePutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UseSpoolFilamentSpoolSpoolIdUsePutApiResponse>();

                        UseSpoolFilamentSpoolSpoolIdUsePutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/spool/{spool_id}/use", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUseSpoolFilamentSpoolSpoolIdUsePutDefaultImplementation(apiResponseLocalVar, spoolId, spoolUseParameters);

                        Events.ExecuteOnUseSpoolFilamentSpoolSpoolIdUsePut(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUseSpoolFilamentSpoolSpoolIdUsePutDefaultImplementation(e, "/spool/{spool_id}/use", uriBuilderLocalVar.Path, spoolId, spoolUseParameters);
                Events.ExecuteOnErrorUseSpoolFilamentSpoolSpoolIdUsePut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UseSpoolFilamentSpoolSpoolIdUsePutApiResponse"/>
        /// </summary>
        public partial class UseSpoolFilamentSpoolSpoolIdUsePutApiResponse : SpoolMan.Api.Client.ApiResponse, IUseSpoolFilamentSpoolSpoolIdUsePutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UseSpoolFilamentSpoolSpoolIdUsePutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UseSpoolFilamentSpoolSpoolIdUsePutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UseSpoolFilamentSpoolSpoolIdUsePutApiResponse(ILogger<UseSpoolFilamentSpoolSpoolIdUsePutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Spool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Spool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Spool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
