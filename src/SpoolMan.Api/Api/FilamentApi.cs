// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using SpoolMan.Api.Client;
using SpoolMan.Api.Model;
using System.Diagnostics.CodeAnalysis;

namespace SpoolMan.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFilamentApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FilamentApiEvents Events { get; }

        /// <summary>
        /// Add Filament
        /// </summary>
        /// <remarks>
        /// Add a new filament to the database.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilamentFilamentPostApiResponse"/>&gt;</returns>
        Task<IAddFilamentFilamentPostApiResponse> AddFilamentFilamentPostAsync(FilamentParameters filamentParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Filament
        /// </summary>
        /// <remarks>
        /// Add a new filament to the database.
        /// </remarks>
        /// <param name="filamentParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilamentFilamentPostApiResponse"/>?&gt;</returns>
        Task<IAddFilamentFilamentPostApiResponse?> AddFilamentFilamentPostOrDefaultAsync(FilamentParameters filamentParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Filament
        /// </summary>
        /// <remarks>
        /// Delete a filament.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFilamentFilamentFilamentIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteFilamentFilamentFilamentIdDeleteApiResponse> DeleteFilamentFilamentFilamentIdDeleteAsync(int filamentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Filament
        /// </summary>
        /// <remarks>
        /// Delete a filament.
        /// </remarks>
        /// <param name="filamentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFilamentFilamentFilamentIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteFilamentFilamentFilamentIdDeleteApiResponse?> DeleteFilamentFilamentFilamentIdDeleteOrDefaultAsync(int filamentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Filaments
        /// </summary>
        /// <remarks>
        /// Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">See vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See vendor.id. (optional) (deprecated)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindFilamentsFilamentGetApiResponse"/>&gt;</returns>
        Task<IFindFilamentsFilamentGetApiResponse> FindFilamentsFilamentGetAsync(Option<string?> vendorName = default, Option<string?> vendorId = default, Option<string?> vendorName2 = default, Option<string?> vendorId2 = default, Option<string?> name = default, Option<string?> material = default, Option<string?> articleNumber = default, Option<string?> colorHex = default, Option<decimal> colorSimilarityThreshold = default, Option<string?> externalId = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Filaments
        /// </summary>
        /// <remarks>
        /// Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <param name="vendorName">See vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See vendor.id. (optional) (deprecated)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindFilamentsFilamentGetApiResponse"/>?&gt;</returns>
        Task<IFindFilamentsFilamentGetApiResponse?> FindFilamentsFilamentGetOrDefaultAsync(Option<string?> vendorName = default, Option<string?> vendorId = default, Option<string?> vendorName2 = default, Option<string?> vendorId2 = default, Option<string?> name = default, Option<string?> material = default, Option<string?> articleNumber = default, Option<string?> colorHex = default, Option<decimal> colorSimilarityThreshold = default, Option<string?> externalId = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Filament
        /// </summary>
        /// <remarks>
        /// Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFilamentFilamentFilamentIdGetApiResponse"/>&gt;</returns>
        Task<IGetFilamentFilamentFilamentIdGetApiResponse> GetFilamentFilamentFilamentIdGetAsync(int filamentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Filament
        /// </summary>
        /// <remarks>
        /// Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <param name="filamentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFilamentFilamentFilamentIdGetApiResponse"/>?&gt;</returns>
        Task<IGetFilamentFilamentFilamentIdGetApiResponse?> GetFilamentFilamentFilamentIdGetOrDefaultAsync(int filamentId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Filament
        /// </summary>
        /// <remarks>
        /// Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFilamentFilamentFilamentIdPatchApiResponse"/>&gt;</returns>
        Task<IUpdateFilamentFilamentFilamentIdPatchApiResponse> UpdateFilamentFilamentFilamentIdPatchAsync(int filamentId, FilamentUpdateParameters filamentUpdateParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Filament
        /// </summary>
        /// <remarks>
        /// Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFilamentFilamentFilamentIdPatchApiResponse"/>?&gt;</returns>
        Task<IUpdateFilamentFilamentFilamentIdPatchApiResponse?> UpdateFilamentFilamentFilamentIdPatchOrDefaultAsync(int filamentId, FilamentUpdateParameters filamentUpdateParameters, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddFilamentFilamentPostApiResponse"/>
    /// </summary>
    public interface IAddFilamentFilamentPostApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Filament?>, IBadRequest<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteFilamentFilamentFilamentIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteFilamentFilamentFilamentIdDeleteApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Message?>, IForbidden<SpoolMan.Api.Model.Message?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IFindFilamentsFilamentGetApiResponse"/>
    /// </summary>
    public interface IFindFilamentsFilamentGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<List<Filament>?>, ICustomHttpStatusCode299<SpoolMan.Api.Model.FilamentEvent?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 299 CustomHttpStatusCode299
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode299 { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetFilamentFilamentFilamentIdGetApiResponse"/>
    /// </summary>
    public interface IGetFilamentFilamentFilamentIdGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Filament?>, ICustomHttpStatusCode299<SpoolMan.Api.Model.FilamentEvent?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 299 CustomHttpStatusCode299
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode299 { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateFilamentFilamentFilamentIdPatchApiResponse"/>
    /// </summary>
    public interface IUpdateFilamentFilamentFilamentIdPatchApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Filament?>, IBadRequest<SpoolMan.Api.Model.Message?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FilamentApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddFilamentFilamentPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddFilamentFilamentPost;

        internal void ExecuteOnAddFilamentFilamentPost(FilamentApi.AddFilamentFilamentPostApiResponse apiResponse)
        {
            OnAddFilamentFilamentPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddFilamentFilamentPost(Exception exception)
        {
            OnErrorAddFilamentFilamentPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteFilamentFilamentFilamentIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteFilamentFilamentFilamentIdDelete;

        internal void ExecuteOnDeleteFilamentFilamentFilamentIdDelete(FilamentApi.DeleteFilamentFilamentFilamentIdDeleteApiResponse apiResponse)
        {
            OnDeleteFilamentFilamentFilamentIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteFilamentFilamentFilamentIdDelete(Exception exception)
        {
            OnErrorDeleteFilamentFilamentFilamentIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindFilamentsFilamentGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindFilamentsFilamentGet;

        internal void ExecuteOnFindFilamentsFilamentGet(FilamentApi.FindFilamentsFilamentGetApiResponse apiResponse)
        {
            OnFindFilamentsFilamentGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindFilamentsFilamentGet(Exception exception)
        {
            OnErrorFindFilamentsFilamentGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFilamentFilamentFilamentIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFilamentFilamentFilamentIdGet;

        internal void ExecuteOnGetFilamentFilamentFilamentIdGet(FilamentApi.GetFilamentFilamentFilamentIdGetApiResponse apiResponse)
        {
            OnGetFilamentFilamentFilamentIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFilamentFilamentFilamentIdGet(Exception exception)
        {
            OnErrorGetFilamentFilamentFilamentIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFilamentFilamentFilamentIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFilamentFilamentFilamentIdPatch;

        internal void ExecuteOnUpdateFilamentFilamentFilamentIdPatch(FilamentApi.UpdateFilamentFilamentFilamentIdPatchApiResponse apiResponse)
        {
            OnUpdateFilamentFilamentFilamentIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFilamentFilamentFilamentIdPatch(Exception exception)
        {
            OnErrorUpdateFilamentFilamentFilamentIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FilamentApi : IFilamentApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FilamentApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FilamentApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilamentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilamentApi(ILogger<FilamentApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FilamentApiEvents filamentApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FilamentApi>();
            HttpClient = httpClient;
            Events = filamentApiEvents;
        }

        partial void FormatAddFilamentFilamentPost(FilamentParameters filamentParameters);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filamentParameters"></param>
        /// <returns></returns>
        private void ValidateAddFilamentFilamentPost(FilamentParameters filamentParameters)
        {
            if (filamentParameters == null)
                throw new ArgumentNullException(nameof(filamentParameters));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filamentParameters"></param>
        private void AfterAddFilamentFilamentPostDefaultImplementation(IAddFilamentFilamentPostApiResponse apiResponseLocalVar, FilamentParameters filamentParameters)
        {
            bool suppressDefaultLog = false;
            AfterAddFilamentFilamentPost(ref suppressDefaultLog, apiResponseLocalVar, filamentParameters);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filamentParameters"></param>
        partial void AfterAddFilamentFilamentPost(ref bool suppressDefaultLog, IAddFilamentFilamentPostApiResponse apiResponseLocalVar, FilamentParameters filamentParameters);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filamentParameters"></param>
        private void OnErrorAddFilamentFilamentPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FilamentParameters filamentParameters)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddFilamentFilamentPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, filamentParameters);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filamentParameters"></param>
        partial void OnErrorAddFilamentFilamentPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FilamentParameters filamentParameters);

        /// <summary>
        /// Add Filament Add a new filament to the database.
        /// </summary>
        /// <param name="filamentParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilamentFilamentPostApiResponse"/>&gt;</returns>
        public async Task<IAddFilamentFilamentPostApiResponse?> AddFilamentFilamentPostOrDefaultAsync(FilamentParameters filamentParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddFilamentFilamentPostAsync(filamentParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Filament Add a new filament to the database.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilamentFilamentPostApiResponse"/>&gt;</returns>
        public async Task<IAddFilamentFilamentPostApiResponse> AddFilamentFilamentPostAsync(FilamentParameters filamentParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddFilamentFilamentPost(filamentParameters);

                FormatAddFilamentFilamentPost(filamentParameters);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/filament");

                    httpRequestMessageLocalVar.Content = (filamentParameters as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(filamentParameters, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddFilamentFilamentPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddFilamentFilamentPostApiResponse>();

                        AddFilamentFilamentPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/filament", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddFilamentFilamentPostDefaultImplementation(apiResponseLocalVar, filamentParameters);

                        Events.ExecuteOnAddFilamentFilamentPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddFilamentFilamentPostDefaultImplementation(e, "/filament", uriBuilderLocalVar.Path, filamentParameters);
                Events.ExecuteOnErrorAddFilamentFilamentPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddFilamentFilamentPostApiResponse"/>
        /// </summary>
        public partial class AddFilamentFilamentPostApiResponse : SpoolMan.Api.Client.ApiResponse, IAddFilamentFilamentPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddFilamentFilamentPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddFilamentFilamentPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilamentFilamentPostApiResponse(ILogger<AddFilamentFilamentPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Filament? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Filament>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Filament? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteFilamentFilamentFilamentIdDelete(ref int filamentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filamentId"></param>
        private void AfterDeleteFilamentFilamentFilamentIdDeleteDefaultImplementation(IDeleteFilamentFilamentFilamentIdDeleteApiResponse apiResponseLocalVar, int filamentId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteFilamentFilamentFilamentIdDelete(ref suppressDefaultLog, apiResponseLocalVar, filamentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filamentId"></param>
        partial void AfterDeleteFilamentFilamentFilamentIdDelete(ref bool suppressDefaultLog, IDeleteFilamentFilamentFilamentIdDeleteApiResponse apiResponseLocalVar, int filamentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filamentId"></param>
        private void OnErrorDeleteFilamentFilamentFilamentIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int filamentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteFilamentFilamentFilamentIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, filamentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filamentId"></param>
        partial void OnErrorDeleteFilamentFilamentFilamentIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int filamentId);

        /// <summary>
        /// Delete Filament Delete a filament.
        /// </summary>
        /// <param name="filamentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFilamentFilamentFilamentIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteFilamentFilamentFilamentIdDeleteApiResponse?> DeleteFilamentFilamentFilamentIdDeleteOrDefaultAsync(int filamentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteFilamentFilamentFilamentIdDeleteAsync(filamentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Filament Delete a filament.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFilamentFilamentFilamentIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteFilamentFilamentFilamentIdDeleteApiResponse> DeleteFilamentFilamentFilamentIdDeleteAsync(int filamentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteFilamentFilamentFilamentIdDelete(ref filamentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/filament/{filament_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfilament_id%7D", Uri.EscapeDataString(filamentId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteFilamentFilamentFilamentIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteFilamentFilamentFilamentIdDeleteApiResponse>();

                        DeleteFilamentFilamentFilamentIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/filament/{filament_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteFilamentFilamentFilamentIdDeleteDefaultImplementation(apiResponseLocalVar, filamentId);

                        Events.ExecuteOnDeleteFilamentFilamentFilamentIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteFilamentFilamentFilamentIdDeleteDefaultImplementation(e, "/filament/{filament_id}", uriBuilderLocalVar.Path, filamentId);
                Events.ExecuteOnErrorDeleteFilamentFilamentFilamentIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteFilamentFilamentFilamentIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteFilamentFilamentFilamentIdDeleteApiResponse : SpoolMan.Api.Client.ApiResponse, IDeleteFilamentFilamentFilamentIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteFilamentFilamentFilamentIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteFilamentFilamentFilamentIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteFilamentFilamentFilamentIdDeleteApiResponse(ILogger<DeleteFilamentFilamentFilamentIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindFilamentsFilamentGet(ref Option<string?> vendorName, ref Option<string?> vendorId, ref Option<string?> vendorName2, ref Option<string?> vendorId2, ref Option<string?> name, ref Option<string?> material, ref Option<string?> articleNumber, ref Option<string?> colorHex, ref Option<decimal> colorSimilarityThreshold, ref Option<string?> externalId, ref Option<string?> sort, ref Option<int?> limit, ref Option<int> offset);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="vendorName"></param>
        /// <param name="vendorId"></param>
        /// <param name="vendorName2"></param>
        /// <param name="vendorId2"></param>
        /// <param name="name"></param>
        /// <param name="material"></param>
        /// <param name="articleNumber"></param>
        /// <param name="colorHex"></param>
        /// <param name="colorSimilarityThreshold"></param>
        /// <param name="externalId"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterFindFilamentsFilamentGetDefaultImplementation(IFindFilamentsFilamentGetApiResponse apiResponseLocalVar, Option<string?> vendorName, Option<string?> vendorId, Option<string?> vendorName2, Option<string?> vendorId2, Option<string?> name, Option<string?> material, Option<string?> articleNumber, Option<string?> colorHex, Option<decimal> colorSimilarityThreshold, Option<string?> externalId, Option<string?> sort, Option<int?> limit, Option<int> offset)
        {
            bool suppressDefaultLog = false;
            AfterFindFilamentsFilamentGet(ref suppressDefaultLog, apiResponseLocalVar, vendorName, vendorId, vendorName2, vendorId2, name, material, articleNumber, colorHex, colorSimilarityThreshold, externalId, sort, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="vendorName"></param>
        /// <param name="vendorId"></param>
        /// <param name="vendorName2"></param>
        /// <param name="vendorId2"></param>
        /// <param name="name"></param>
        /// <param name="material"></param>
        /// <param name="articleNumber"></param>
        /// <param name="colorHex"></param>
        /// <param name="colorSimilarityThreshold"></param>
        /// <param name="externalId"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterFindFilamentsFilamentGet(ref bool suppressDefaultLog, IFindFilamentsFilamentGetApiResponse apiResponseLocalVar, Option<string?> vendorName, Option<string?> vendorId, Option<string?> vendorName2, Option<string?> vendorId2, Option<string?> name, Option<string?> material, Option<string?> articleNumber, Option<string?> colorHex, Option<decimal> colorSimilarityThreshold, Option<string?> externalId, Option<string?> sort, Option<int?> limit, Option<int> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="vendorName"></param>
        /// <param name="vendorId"></param>
        /// <param name="vendorName2"></param>
        /// <param name="vendorId2"></param>
        /// <param name="name"></param>
        /// <param name="material"></param>
        /// <param name="articleNumber"></param>
        /// <param name="colorHex"></param>
        /// <param name="colorSimilarityThreshold"></param>
        /// <param name="externalId"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorFindFilamentsFilamentGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> vendorName, Option<string?> vendorId, Option<string?> vendorName2, Option<string?> vendorId2, Option<string?> name, Option<string?> material, Option<string?> articleNumber, Option<string?> colorHex, Option<decimal> colorSimilarityThreshold, Option<string?> externalId, Option<string?> sort, Option<int?> limit, Option<int> offset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindFilamentsFilamentGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, vendorName, vendorId, vendorName2, vendorId2, name, material, articleNumber, colorHex, colorSimilarityThreshold, externalId, sort, limit, offset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="vendorName"></param>
        /// <param name="vendorId"></param>
        /// <param name="vendorName2"></param>
        /// <param name="vendorId2"></param>
        /// <param name="name"></param>
        /// <param name="material"></param>
        /// <param name="articleNumber"></param>
        /// <param name="colorHex"></param>
        /// <param name="colorSimilarityThreshold"></param>
        /// <param name="externalId"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorFindFilamentsFilamentGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> vendorName, Option<string?> vendorId, Option<string?> vendorName2, Option<string?> vendorId2, Option<string?> name, Option<string?> material, Option<string?> articleNumber, Option<string?> colorHex, Option<decimal> colorSimilarityThreshold, Option<string?> externalId, Option<string?> sort, Option<int?> limit, Option<int> offset);

        /// <summary>
        /// Find Filaments Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <param name="vendorName">See vendor.name. (optional)</param>
        /// <param name="vendorId">See vendor.id. (optional)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindFilamentsFilamentGetApiResponse"/>&gt;</returns>
        public async Task<IFindFilamentsFilamentGetApiResponse?> FindFilamentsFilamentGetOrDefaultAsync(Option<string?> vendorName = default, Option<string?> vendorId = default, Option<string?> vendorName2 = default, Option<string?> vendorId2 = default, Option<string?> name = default, Option<string?> material = default, Option<string?> articleNumber = default, Option<string?> colorHex = default, Option<decimal> colorSimilarityThreshold = default, Option<string?> externalId = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindFilamentsFilamentGetAsync(vendorName, vendorId, vendorName2, vendorId2, name, material, articleNumber, colorHex, colorSimilarityThreshold, externalId, sort, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Find Filaments Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">See vendor.name. (optional)</param>
        /// <param name="vendorId">See vendor.id. (optional)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindFilamentsFilamentGetApiResponse"/>&gt;</returns>
        public async Task<IFindFilamentsFilamentGetApiResponse> FindFilamentsFilamentGetAsync(Option<string?> vendorName = default, Option<string?> vendorId = default, Option<string?> vendorName2 = default, Option<string?> vendorId2 = default, Option<string?> name = default, Option<string?> material = default, Option<string?> articleNumber = default, Option<string?> colorHex = default, Option<decimal> colorSimilarityThreshold = default, Option<string?> externalId = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatFindFilamentsFilamentGet(ref vendorName, ref vendorId, ref vendorName2, ref vendorId2, ref name, ref material, ref articleNumber, ref colorHex, ref colorSimilarityThreshold, ref externalId, ref sort, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/filament");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (vendorName.IsSet)
                        parseQueryStringLocalVar["vendor_name"] = ClientUtils.ParameterToString(vendorName.Value);

                    if (vendorId.IsSet)
                        parseQueryStringLocalVar["vendor_id"] = ClientUtils.ParameterToString(vendorId.Value);

                    if (vendorName2.IsSet)
                        parseQueryStringLocalVar["vendor.name"] = ClientUtils.ParameterToString(vendorName2.Value);

                    if (vendorId2.IsSet)
                        parseQueryStringLocalVar["vendor.id"] = ClientUtils.ParameterToString(vendorId2.Value);

                    if (name.IsSet)
                        parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name.Value);

                    if (material.IsSet)
                        parseQueryStringLocalVar["material"] = ClientUtils.ParameterToString(material.Value);

                    if (articleNumber.IsSet)
                        parseQueryStringLocalVar["article_number"] = ClientUtils.ParameterToString(articleNumber.Value);

                    if (colorHex.IsSet)
                        parseQueryStringLocalVar["color_hex"] = ClientUtils.ParameterToString(colorHex.Value);

                    if (colorSimilarityThreshold.IsSet)
                        parseQueryStringLocalVar["color_similarity_threshold"] = ClientUtils.ParameterToString(colorSimilarityThreshold.Value);

                    if (externalId.IsSet)
                        parseQueryStringLocalVar["external_id"] = ClientUtils.ParameterToString(externalId.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindFilamentsFilamentGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindFilamentsFilamentGetApiResponse>();

                        FindFilamentsFilamentGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/filament", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindFilamentsFilamentGetDefaultImplementation(apiResponseLocalVar, vendorName, vendorId, vendorName2, vendorId2, name, material, articleNumber, colorHex, colorSimilarityThreshold, externalId, sort, limit, offset);

                        Events.ExecuteOnFindFilamentsFilamentGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindFilamentsFilamentGetDefaultImplementation(e, "/filament", uriBuilderLocalVar.Path, vendorName, vendorId, vendorName2, vendorId2, name, material, articleNumber, colorHex, colorSimilarityThreshold, externalId, sort, limit, offset);
                Events.ExecuteOnErrorFindFilamentsFilamentGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindFilamentsFilamentGetApiResponse"/>
        /// </summary>
        public partial class FindFilamentsFilamentGetApiResponse : SpoolMan.Api.Client.ApiResponse, IFindFilamentsFilamentGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindFilamentsFilamentGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindFilamentsFilamentGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindFilamentsFilamentGetApiResponse(ILogger<FindFilamentsFilamentGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Filament>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Filament>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Filament>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode299 => 299 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.FilamentEvent? CustomHttpStatusCode299()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode299
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.FilamentEvent>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299 and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode299([NotNullWhen(true)]out SpoolMan.Api.Model.FilamentEvent? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode299();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)299);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFilamentFilamentFilamentIdGet(ref int filamentId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filamentId"></param>
        private void AfterGetFilamentFilamentFilamentIdGetDefaultImplementation(IGetFilamentFilamentFilamentIdGetApiResponse apiResponseLocalVar, int filamentId)
        {
            bool suppressDefaultLog = false;
            AfterGetFilamentFilamentFilamentIdGet(ref suppressDefaultLog, apiResponseLocalVar, filamentId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filamentId"></param>
        partial void AfterGetFilamentFilamentFilamentIdGet(ref bool suppressDefaultLog, IGetFilamentFilamentFilamentIdGetApiResponse apiResponseLocalVar, int filamentId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filamentId"></param>
        private void OnErrorGetFilamentFilamentFilamentIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int filamentId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFilamentFilamentFilamentIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, filamentId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filamentId"></param>
        partial void OnErrorGetFilamentFilamentFilamentIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int filamentId);

        /// <summary>
        /// Get Filament Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <param name="filamentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFilamentFilamentFilamentIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetFilamentFilamentFilamentIdGetApiResponse?> GetFilamentFilamentFilamentIdGetOrDefaultAsync(int filamentId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFilamentFilamentFilamentIdGetAsync(filamentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Filament Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFilamentFilamentFilamentIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetFilamentFilamentFilamentIdGetApiResponse> GetFilamentFilamentFilamentIdGetAsync(int filamentId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetFilamentFilamentFilamentIdGet(ref filamentId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/filament/{filament_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfilament_id%7D", Uri.EscapeDataString(filamentId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFilamentFilamentFilamentIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFilamentFilamentFilamentIdGetApiResponse>();

                        GetFilamentFilamentFilamentIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/filament/{filament_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFilamentFilamentFilamentIdGetDefaultImplementation(apiResponseLocalVar, filamentId);

                        Events.ExecuteOnGetFilamentFilamentFilamentIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFilamentFilamentFilamentIdGetDefaultImplementation(e, "/filament/{filament_id}", uriBuilderLocalVar.Path, filamentId);
                Events.ExecuteOnErrorGetFilamentFilamentFilamentIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFilamentFilamentFilamentIdGetApiResponse"/>
        /// </summary>
        public partial class GetFilamentFilamentFilamentIdGetApiResponse : SpoolMan.Api.Client.ApiResponse, IGetFilamentFilamentFilamentIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFilamentFilamentFilamentIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFilamentFilamentFilamentIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFilamentFilamentFilamentIdGetApiResponse(ILogger<GetFilamentFilamentFilamentIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Filament? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Filament>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Filament? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode299 => 299 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.FilamentEvent? CustomHttpStatusCode299()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode299
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.FilamentEvent>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299 and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode299([NotNullWhen(true)]out SpoolMan.Api.Model.FilamentEvent? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode299();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)299);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateFilamentFilamentFilamentIdPatch(ref int filamentId, FilamentUpdateParameters filamentUpdateParameters);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filamentUpdateParameters"></param>
        /// <returns></returns>
        private void ValidateUpdateFilamentFilamentFilamentIdPatch(FilamentUpdateParameters filamentUpdateParameters)
        {
            if (filamentUpdateParameters == null)
                throw new ArgumentNullException(nameof(filamentUpdateParameters));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        private void AfterUpdateFilamentFilamentFilamentIdPatchDefaultImplementation(IUpdateFilamentFilamentFilamentIdPatchApiResponse apiResponseLocalVar, int filamentId, FilamentUpdateParameters filamentUpdateParameters)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFilamentFilamentFilamentIdPatch(ref suppressDefaultLog, apiResponseLocalVar, filamentId, filamentUpdateParameters);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        partial void AfterUpdateFilamentFilamentFilamentIdPatch(ref bool suppressDefaultLog, IUpdateFilamentFilamentFilamentIdPatchApiResponse apiResponseLocalVar, int filamentId, FilamentUpdateParameters filamentUpdateParameters);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        private void OnErrorUpdateFilamentFilamentFilamentIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int filamentId, FilamentUpdateParameters filamentUpdateParameters)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFilamentFilamentFilamentIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, filamentId, filamentUpdateParameters);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        partial void OnErrorUpdateFilamentFilamentFilamentIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int filamentId, FilamentUpdateParameters filamentUpdateParameters);

        /// <summary>
        /// Update Filament Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFilamentFilamentFilamentIdPatchApiResponse"/>&gt;</returns>
        public async Task<IUpdateFilamentFilamentFilamentIdPatchApiResponse?> UpdateFilamentFilamentFilamentIdPatchOrDefaultAsync(int filamentId, FilamentUpdateParameters filamentUpdateParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFilamentFilamentFilamentIdPatchAsync(filamentId, filamentUpdateParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Filament Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFilamentFilamentFilamentIdPatchApiResponse"/>&gt;</returns>
        public async Task<IUpdateFilamentFilamentFilamentIdPatchApiResponse> UpdateFilamentFilamentFilamentIdPatchAsync(int filamentId, FilamentUpdateParameters filamentUpdateParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFilamentFilamentFilamentIdPatch(filamentUpdateParameters);

                FormatUpdateFilamentFilamentFilamentIdPatch(ref filamentId, filamentUpdateParameters);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/filament/{filament_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfilament_id%7D", Uri.EscapeDataString(filamentId.ToString()));

                    httpRequestMessageLocalVar.Content = (filamentUpdateParameters as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(filamentUpdateParameters, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateFilamentFilamentFilamentIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateFilamentFilamentFilamentIdPatchApiResponse>();

                        UpdateFilamentFilamentFilamentIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/filament/{filament_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateFilamentFilamentFilamentIdPatchDefaultImplementation(apiResponseLocalVar, filamentId, filamentUpdateParameters);

                        Events.ExecuteOnUpdateFilamentFilamentFilamentIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFilamentFilamentFilamentIdPatchDefaultImplementation(e, "/filament/{filament_id}", uriBuilderLocalVar.Path, filamentId, filamentUpdateParameters);
                Events.ExecuteOnErrorUpdateFilamentFilamentFilamentIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateFilamentFilamentFilamentIdPatchApiResponse"/>
        /// </summary>
        public partial class UpdateFilamentFilamentFilamentIdPatchApiResponse : SpoolMan.Api.Client.ApiResponse, IUpdateFilamentFilamentFilamentIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateFilamentFilamentFilamentIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateFilamentFilamentFilamentIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFilamentFilamentFilamentIdPatchApiResponse(ILogger<UpdateFilamentFilamentFilamentIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Filament? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Filament>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Filament? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
