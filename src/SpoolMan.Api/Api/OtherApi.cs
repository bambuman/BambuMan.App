// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using SpoolMan.Api.Client;
using SpoolMan.Api.Model;
using System.Diagnostics.CodeAnalysis;

namespace SpoolMan.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOtherApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OtherApiEvents Events { get; }

        /// <summary>
        /// Find Article Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all article numbers.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindArticleNumbersArticleNumberGetApiResponse"/>&gt;</returns>
        Task<IFindArticleNumbersArticleNumberGetApiResponse> FindArticleNumbersArticleNumberGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Article Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all article numbers.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindArticleNumbersArticleNumberGetApiResponse"/>?&gt;</returns>
        Task<IFindArticleNumbersArticleNumberGetApiResponse?> FindArticleNumbersArticleNumberGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Locations
        /// </summary>
        /// <remarks>
        /// Get a list of all spool locations.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindLocationsLocationGetApiResponse"/>&gt;</returns>
        Task<IFindLocationsLocationGetApiResponse> FindLocationsLocationGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Locations
        /// </summary>
        /// <remarks>
        /// Get a list of all spool locations.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindLocationsLocationGetApiResponse"/>?&gt;</returns>
        Task<IFindLocationsLocationGetApiResponse?> FindLocationsLocationGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Lot Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all lot numbers.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindLotNumbersLotNumberGetApiResponse"/>&gt;</returns>
        Task<IFindLotNumbersLotNumberGetApiResponse> FindLotNumbersLotNumberGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Lot Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all lot numbers.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindLotNumbersLotNumberGetApiResponse"/>?&gt;</returns>
        Task<IFindLotNumbersLotNumberGetApiResponse?> FindLotNumbersLotNumberGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Materials
        /// </summary>
        /// <remarks>
        /// Get a list of all filament materials.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindMaterialsMaterialGetApiResponse"/>&gt;</returns>
        Task<IFindMaterialsMaterialGetApiResponse> FindMaterialsMaterialGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Materials
        /// </summary>
        /// <remarks>
        /// Get a list of all filament materials.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindMaterialsMaterialGetApiResponse"/>?&gt;</returns>
        Task<IFindMaterialsMaterialGetApiResponse?> FindMaterialsMaterialGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Rename Location
        /// </summary>
        /// <remarks>
        /// Rename a spool location. All spools in this location will be moved to the new location.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameLocationLocationLocationPatchApiResponse"/>&gt;</returns>
        Task<IRenameLocationLocationLocationPatchApiResponse> RenameLocationLocationLocationPatchAsync(string location, RenameLocationBody renameLocationBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Rename Location
        /// </summary>
        /// <remarks>
        /// Rename a spool location. All spools in this location will be moved to the new location.
        /// </remarks>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameLocationLocationLocationPatchApiResponse"/>?&gt;</returns>
        Task<IRenameLocationLocationLocationPatchApiResponse?> RenameLocationLocationLocationPatchOrDefaultAsync(string location, RenameLocationBody renameLocationBody, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IFindArticleNumbersArticleNumberGetApiResponse"/>
    /// </summary>
    public interface IFindArticleNumbersArticleNumberGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<List<string>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IFindLocationsLocationGetApiResponse"/>
    /// </summary>
    public interface IFindLocationsLocationGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<List<string>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IFindLotNumbersLotNumberGetApiResponse"/>
    /// </summary>
    public interface IFindLotNumbersLotNumberGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<List<string>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IFindMaterialsMaterialGetApiResponse"/>
    /// </summary>
    public interface IFindMaterialsMaterialGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<List<string>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IRenameLocationLocationLocationPatchApiResponse"/>
    /// </summary>
    public interface IRenameLocationLocationLocationPatchApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<string?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OtherApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindArticleNumbersArticleNumberGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindArticleNumbersArticleNumberGet;

        internal void ExecuteOnFindArticleNumbersArticleNumberGet(OtherApi.FindArticleNumbersArticleNumberGetApiResponse apiResponse)
        {
            OnFindArticleNumbersArticleNumberGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindArticleNumbersArticleNumberGet(Exception exception)
        {
            OnErrorFindArticleNumbersArticleNumberGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindLocationsLocationGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindLocationsLocationGet;

        internal void ExecuteOnFindLocationsLocationGet(OtherApi.FindLocationsLocationGetApiResponse apiResponse)
        {
            OnFindLocationsLocationGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindLocationsLocationGet(Exception exception)
        {
            OnErrorFindLocationsLocationGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindLotNumbersLotNumberGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindLotNumbersLotNumberGet;

        internal void ExecuteOnFindLotNumbersLotNumberGet(OtherApi.FindLotNumbersLotNumberGetApiResponse apiResponse)
        {
            OnFindLotNumbersLotNumberGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindLotNumbersLotNumberGet(Exception exception)
        {
            OnErrorFindLotNumbersLotNumberGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindMaterialsMaterialGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindMaterialsMaterialGet;

        internal void ExecuteOnFindMaterialsMaterialGet(OtherApi.FindMaterialsMaterialGetApiResponse apiResponse)
        {
            OnFindMaterialsMaterialGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindMaterialsMaterialGet(Exception exception)
        {
            OnErrorFindMaterialsMaterialGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRenameLocationLocationLocationPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRenameLocationLocationLocationPatch;

        internal void ExecuteOnRenameLocationLocationLocationPatch(OtherApi.RenameLocationLocationLocationPatchApiResponse apiResponse)
        {
            OnRenameLocationLocationLocationPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRenameLocationLocationLocationPatch(Exception exception)
        {
            OnErrorRenameLocationLocationLocationPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OtherApi : IOtherApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OtherApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OtherApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OtherApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OtherApi(ILogger<OtherApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OtherApiEvents otherApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OtherApi>();
            HttpClient = httpClient;
            Events = otherApiEvents;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterFindArticleNumbersArticleNumberGetDefaultImplementation(IFindArticleNumbersArticleNumberGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterFindArticleNumbersArticleNumberGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterFindArticleNumbersArticleNumberGet(ref bool suppressDefaultLog, IFindArticleNumbersArticleNumberGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorFindArticleNumbersArticleNumberGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindArticleNumbersArticleNumberGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorFindArticleNumbersArticleNumberGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Find Article Numbers Get a list of all article numbers.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindArticleNumbersArticleNumberGetApiResponse"/>&gt;</returns>
        public async Task<IFindArticleNumbersArticleNumberGetApiResponse?> FindArticleNumbersArticleNumberGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindArticleNumbersArticleNumberGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Find Article Numbers Get a list of all article numbers.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindArticleNumbersArticleNumberGetApiResponse"/>&gt;</returns>
        public async Task<IFindArticleNumbersArticleNumberGetApiResponse> FindArticleNumbersArticleNumberGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/article-number");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindArticleNumbersArticleNumberGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindArticleNumbersArticleNumberGetApiResponse>();

                        FindArticleNumbersArticleNumberGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/article-number", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindArticleNumbersArticleNumberGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnFindArticleNumbersArticleNumberGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindArticleNumbersArticleNumberGetDefaultImplementation(e, "/article-number", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorFindArticleNumbersArticleNumberGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindArticleNumbersArticleNumberGetApiResponse"/>
        /// </summary>
        public partial class FindArticleNumbersArticleNumberGetApiResponse : SpoolMan.Api.Client.ApiResponse, IFindArticleNumbersArticleNumberGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindArticleNumbersArticleNumberGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindArticleNumbersArticleNumberGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindArticleNumbersArticleNumberGetApiResponse(ILogger<FindArticleNumbersArticleNumberGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<string>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<string>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<string>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterFindLocationsLocationGetDefaultImplementation(IFindLocationsLocationGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterFindLocationsLocationGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterFindLocationsLocationGet(ref bool suppressDefaultLog, IFindLocationsLocationGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorFindLocationsLocationGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindLocationsLocationGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorFindLocationsLocationGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Find Locations Get a list of all spool locations.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindLocationsLocationGetApiResponse"/>&gt;</returns>
        public async Task<IFindLocationsLocationGetApiResponse?> FindLocationsLocationGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindLocationsLocationGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Find Locations Get a list of all spool locations.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindLocationsLocationGetApiResponse"/>&gt;</returns>
        public async Task<IFindLocationsLocationGetApiResponse> FindLocationsLocationGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/location");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindLocationsLocationGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindLocationsLocationGetApiResponse>();

                        FindLocationsLocationGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/location", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindLocationsLocationGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnFindLocationsLocationGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindLocationsLocationGetDefaultImplementation(e, "/location", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorFindLocationsLocationGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindLocationsLocationGetApiResponse"/>
        /// </summary>
        public partial class FindLocationsLocationGetApiResponse : SpoolMan.Api.Client.ApiResponse, IFindLocationsLocationGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindLocationsLocationGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindLocationsLocationGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindLocationsLocationGetApiResponse(ILogger<FindLocationsLocationGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<string>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<string>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<string>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterFindLotNumbersLotNumberGetDefaultImplementation(IFindLotNumbersLotNumberGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterFindLotNumbersLotNumberGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterFindLotNumbersLotNumberGet(ref bool suppressDefaultLog, IFindLotNumbersLotNumberGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorFindLotNumbersLotNumberGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindLotNumbersLotNumberGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorFindLotNumbersLotNumberGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Find Lot Numbers Get a list of all lot numbers.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindLotNumbersLotNumberGetApiResponse"/>&gt;</returns>
        public async Task<IFindLotNumbersLotNumberGetApiResponse?> FindLotNumbersLotNumberGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindLotNumbersLotNumberGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Find Lot Numbers Get a list of all lot numbers.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindLotNumbersLotNumberGetApiResponse"/>&gt;</returns>
        public async Task<IFindLotNumbersLotNumberGetApiResponse> FindLotNumbersLotNumberGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/lot-number");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindLotNumbersLotNumberGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindLotNumbersLotNumberGetApiResponse>();

                        FindLotNumbersLotNumberGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/lot-number", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindLotNumbersLotNumberGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnFindLotNumbersLotNumberGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindLotNumbersLotNumberGetDefaultImplementation(e, "/lot-number", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorFindLotNumbersLotNumberGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindLotNumbersLotNumberGetApiResponse"/>
        /// </summary>
        public partial class FindLotNumbersLotNumberGetApiResponse : SpoolMan.Api.Client.ApiResponse, IFindLotNumbersLotNumberGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindLotNumbersLotNumberGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindLotNumbersLotNumberGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindLotNumbersLotNumberGetApiResponse(ILogger<FindLotNumbersLotNumberGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<string>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<string>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<string>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterFindMaterialsMaterialGetDefaultImplementation(IFindMaterialsMaterialGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterFindMaterialsMaterialGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterFindMaterialsMaterialGet(ref bool suppressDefaultLog, IFindMaterialsMaterialGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorFindMaterialsMaterialGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindMaterialsMaterialGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorFindMaterialsMaterialGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Find Materials Get a list of all filament materials.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindMaterialsMaterialGetApiResponse"/>&gt;</returns>
        public async Task<IFindMaterialsMaterialGetApiResponse?> FindMaterialsMaterialGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindMaterialsMaterialGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Find Materials Get a list of all filament materials.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindMaterialsMaterialGetApiResponse"/>&gt;</returns>
        public async Task<IFindMaterialsMaterialGetApiResponse> FindMaterialsMaterialGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/material");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindMaterialsMaterialGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindMaterialsMaterialGetApiResponse>();

                        FindMaterialsMaterialGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/material", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindMaterialsMaterialGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnFindMaterialsMaterialGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindMaterialsMaterialGetDefaultImplementation(e, "/material", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorFindMaterialsMaterialGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindMaterialsMaterialGetApiResponse"/>
        /// </summary>
        public partial class FindMaterialsMaterialGetApiResponse : SpoolMan.Api.Client.ApiResponse, IFindMaterialsMaterialGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindMaterialsMaterialGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindMaterialsMaterialGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindMaterialsMaterialGetApiResponse(ILogger<FindMaterialsMaterialGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<string>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<string>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<string>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRenameLocationLocationLocationPatch(ref string location, RenameLocationBody renameLocationBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <returns></returns>
        private void ValidateRenameLocationLocationLocationPatch(string location, RenameLocationBody renameLocationBody)
        {
            if (location == null)
                throw new ArgumentNullException(nameof(location));

            if (renameLocationBody == null)
                throw new ArgumentNullException(nameof(renameLocationBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        private void AfterRenameLocationLocationLocationPatchDefaultImplementation(IRenameLocationLocationLocationPatchApiResponse apiResponseLocalVar, string location, RenameLocationBody renameLocationBody)
        {
            bool suppressDefaultLog = false;
            AfterRenameLocationLocationLocationPatch(ref suppressDefaultLog, apiResponseLocalVar, location, renameLocationBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        partial void AfterRenameLocationLocationLocationPatch(ref bool suppressDefaultLog, IRenameLocationLocationLocationPatchApiResponse apiResponseLocalVar, string location, RenameLocationBody renameLocationBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        private void OnErrorRenameLocationLocationLocationPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string location, RenameLocationBody renameLocationBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRenameLocationLocationLocationPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, location, renameLocationBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        partial void OnErrorRenameLocationLocationLocationPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string location, RenameLocationBody renameLocationBody);

        /// <summary>
        /// Rename Location Rename a spool location. All spools in this location will be moved to the new location.
        /// </summary>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameLocationLocationLocationPatchApiResponse"/>&gt;</returns>
        public async Task<IRenameLocationLocationLocationPatchApiResponse?> RenameLocationLocationLocationPatchOrDefaultAsync(string location, RenameLocationBody renameLocationBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RenameLocationLocationLocationPatchAsync(location, renameLocationBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Rename Location Rename a spool location. All spools in this location will be moved to the new location.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenameLocationLocationLocationPatchApiResponse"/>&gt;</returns>
        public async Task<IRenameLocationLocationLocationPatchApiResponse> RenameLocationLocationLocationPatchAsync(string location, RenameLocationBody renameLocationBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRenameLocationLocationLocationPatch(location, renameLocationBody);

                FormatRenameLocationLocationLocationPatch(ref location, renameLocationBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/location/{location}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Blocation%7D", Uri.EscapeDataString(location.ToString()));

                    httpRequestMessageLocalVar.Content = (renameLocationBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(renameLocationBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RenameLocationLocationLocationPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RenameLocationLocationLocationPatchApiResponse>();

                        RenameLocationLocationLocationPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/location/{location}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRenameLocationLocationLocationPatchDefaultImplementation(apiResponseLocalVar, location, renameLocationBody);

                        Events.ExecuteOnRenameLocationLocationLocationPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRenameLocationLocationLocationPatchDefaultImplementation(e, "/location/{location}", uriBuilderLocalVar.Path, location, renameLocationBody);
                Events.ExecuteOnErrorRenameLocationLocationLocationPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RenameLocationLocationLocationPatchApiResponse"/>
        /// </summary>
        public partial class RenameLocationLocationLocationPatchApiResponse : SpoolMan.Api.Client.ApiResponse, IRenameLocationLocationLocationPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RenameLocationLocationLocationPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RenameLocationLocationLocationPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RenameLocationLocationLocationPatchApiResponse(ILogger<RenameLocationLocationLocationPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
