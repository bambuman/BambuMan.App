// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using SpoolMan.Api.Client;
using SpoolMan.Api.Model;
using System.Diagnostics.CodeAnalysis;

namespace SpoolMan.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IExportApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ExportApiEvents Events { get; }

        /// <summary>
        /// Export Filaments
        /// </summary>
        /// <remarks>
        /// Export the list of filaments in various formats. Vendor data is included.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportFilamentsExportFilamentsGetApiResponse"/>&gt;</returns>
        Task<IExportFilamentsExportFilamentsGetApiResponse> ExportFilamentsExportFilamentsGetAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export Filaments
        /// </summary>
        /// <remarks>
        /// Export the list of filaments in various formats. Vendor data is included.
        /// </remarks>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportFilamentsExportFilamentsGetApiResponse"/>?&gt;</returns>
        Task<IExportFilamentsExportFilamentsGetApiResponse?> ExportFilamentsExportFilamentsGetOrDefaultAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export Spools
        /// </summary>
        /// <remarks>
        /// Export the list of spools in various formats. Filament and vendor data is included.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportSpoolsExportSpoolsGetApiResponse"/>&gt;</returns>
        Task<IExportSpoolsExportSpoolsGetApiResponse> ExportSpoolsExportSpoolsGetAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export Spools
        /// </summary>
        /// <remarks>
        /// Export the list of spools in various formats. Filament and vendor data is included.
        /// </remarks>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportSpoolsExportSpoolsGetApiResponse"/>?&gt;</returns>
        Task<IExportSpoolsExportSpoolsGetApiResponse?> ExportSpoolsExportSpoolsGetOrDefaultAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export Vendors
        /// </summary>
        /// <remarks>
        /// Export the list of vendors in various formats.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportVendorsExportVendorsGetApiResponse"/>&gt;</returns>
        Task<IExportVendorsExportVendorsGetApiResponse> ExportVendorsExportVendorsGetAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export Vendors
        /// </summary>
        /// <remarks>
        /// Export the list of vendors in various formats.
        /// </remarks>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportVendorsExportVendorsGetApiResponse"/>?&gt;</returns>
        Task<IExportVendorsExportVendorsGetApiResponse?> ExportVendorsExportVendorsGetOrDefaultAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IExportFilamentsExportFilamentsGetApiResponse"/>
    /// </summary>
    public interface IExportFilamentsExportFilamentsGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IExportSpoolsExportSpoolsGetApiResponse"/>
    /// </summary>
    public interface IExportSpoolsExportSpoolsGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IExportVendorsExportVendorsGetApiResponse"/>
    /// </summary>
    public interface IExportVendorsExportVendorsGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ExportApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnExportFilamentsExportFilamentsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorExportFilamentsExportFilamentsGet;

        internal void ExecuteOnExportFilamentsExportFilamentsGet(ExportApi.ExportFilamentsExportFilamentsGetApiResponse apiResponse)
        {
            OnExportFilamentsExportFilamentsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExportFilamentsExportFilamentsGet(Exception exception)
        {
            OnErrorExportFilamentsExportFilamentsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnExportSpoolsExportSpoolsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorExportSpoolsExportSpoolsGet;

        internal void ExecuteOnExportSpoolsExportSpoolsGet(ExportApi.ExportSpoolsExportSpoolsGetApiResponse apiResponse)
        {
            OnExportSpoolsExportSpoolsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExportSpoolsExportSpoolsGet(Exception exception)
        {
            OnErrorExportSpoolsExportSpoolsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnExportVendorsExportVendorsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorExportVendorsExportVendorsGet;

        internal void ExecuteOnExportVendorsExportVendorsGet(ExportApi.ExportVendorsExportVendorsGetApiResponse apiResponse)
        {
            OnExportVendorsExportVendorsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExportVendorsExportVendorsGet(Exception exception)
        {
            OnErrorExportVendorsExportVendorsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ExportApi : IExportApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ExportApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ExportApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExportApi(ILogger<ExportApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ExportApiEvents exportApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ExportApi>();
            HttpClient = httpClient;
            Events = exportApiEvents;
        }

        partial void FormatExportFilamentsExportFilamentsGet(ref ExportFormat fmt);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fmt"></param>
        private void AfterExportFilamentsExportFilamentsGetDefaultImplementation(IExportFilamentsExportFilamentsGetApiResponse apiResponseLocalVar, ExportFormat fmt)
        {
            bool suppressDefaultLog = false;
            AfterExportFilamentsExportFilamentsGet(ref suppressDefaultLog, apiResponseLocalVar, fmt);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fmt"></param>
        partial void AfterExportFilamentsExportFilamentsGet(ref bool suppressDefaultLog, IExportFilamentsExportFilamentsGetApiResponse apiResponseLocalVar, ExportFormat fmt);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fmt"></param>
        private void OnErrorExportFilamentsExportFilamentsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ExportFormat fmt)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorExportFilamentsExportFilamentsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, fmt);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fmt"></param>
        partial void OnErrorExportFilamentsExportFilamentsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ExportFormat fmt);

        /// <summary>
        /// Export Filaments Export the list of filaments in various formats. Vendor data is included.
        /// </summary>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportFilamentsExportFilamentsGetApiResponse"/>&gt;</returns>
        public async Task<IExportFilamentsExportFilamentsGetApiResponse?> ExportFilamentsExportFilamentsGetOrDefaultAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExportFilamentsExportFilamentsGetAsync(fmt, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Export Filaments Export the list of filaments in various formats. Vendor data is included.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportFilamentsExportFilamentsGetApiResponse"/>&gt;</returns>
        public async Task<IExportFilamentsExportFilamentsGetApiResponse> ExportFilamentsExportFilamentsGetAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatExportFilamentsExportFilamentsGet(ref fmt);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/export/filaments");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["fmt"] = ClientUtils.ParameterToString(fmt);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ExportFilamentsExportFilamentsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExportFilamentsExportFilamentsGetApiResponse>();

                        ExportFilamentsExportFilamentsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/export/filaments", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExportFilamentsExportFilamentsGetDefaultImplementation(apiResponseLocalVar, fmt);

                        Events.ExecuteOnExportFilamentsExportFilamentsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExportFilamentsExportFilamentsGetDefaultImplementation(e, "/export/filaments", uriBuilderLocalVar.Path, fmt);
                Events.ExecuteOnErrorExportFilamentsExportFilamentsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExportFilamentsExportFilamentsGetApiResponse"/>
        /// </summary>
        public partial class ExportFilamentsExportFilamentsGetApiResponse : SpoolMan.Api.Client.ApiResponse, IExportFilamentsExportFilamentsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExportFilamentsExportFilamentsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExportFilamentsExportFilamentsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExportFilamentsExportFilamentsGetApiResponse(ILogger<ExportFilamentsExportFilamentsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatExportSpoolsExportSpoolsGet(ref ExportFormat fmt);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fmt"></param>
        private void AfterExportSpoolsExportSpoolsGetDefaultImplementation(IExportSpoolsExportSpoolsGetApiResponse apiResponseLocalVar, ExportFormat fmt)
        {
            bool suppressDefaultLog = false;
            AfterExportSpoolsExportSpoolsGet(ref suppressDefaultLog, apiResponseLocalVar, fmt);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fmt"></param>
        partial void AfterExportSpoolsExportSpoolsGet(ref bool suppressDefaultLog, IExportSpoolsExportSpoolsGetApiResponse apiResponseLocalVar, ExportFormat fmt);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fmt"></param>
        private void OnErrorExportSpoolsExportSpoolsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ExportFormat fmt)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorExportSpoolsExportSpoolsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, fmt);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fmt"></param>
        partial void OnErrorExportSpoolsExportSpoolsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ExportFormat fmt);

        /// <summary>
        /// Export Spools Export the list of spools in various formats. Filament and vendor data is included.
        /// </summary>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportSpoolsExportSpoolsGetApiResponse"/>&gt;</returns>
        public async Task<IExportSpoolsExportSpoolsGetApiResponse?> ExportSpoolsExportSpoolsGetOrDefaultAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExportSpoolsExportSpoolsGetAsync(fmt, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Export Spools Export the list of spools in various formats. Filament and vendor data is included.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportSpoolsExportSpoolsGetApiResponse"/>&gt;</returns>
        public async Task<IExportSpoolsExportSpoolsGetApiResponse> ExportSpoolsExportSpoolsGetAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatExportSpoolsExportSpoolsGet(ref fmt);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/export/spools");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["fmt"] = ClientUtils.ParameterToString(fmt);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ExportSpoolsExportSpoolsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExportSpoolsExportSpoolsGetApiResponse>();

                        ExportSpoolsExportSpoolsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/export/spools", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExportSpoolsExportSpoolsGetDefaultImplementation(apiResponseLocalVar, fmt);

                        Events.ExecuteOnExportSpoolsExportSpoolsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExportSpoolsExportSpoolsGetDefaultImplementation(e, "/export/spools", uriBuilderLocalVar.Path, fmt);
                Events.ExecuteOnErrorExportSpoolsExportSpoolsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExportSpoolsExportSpoolsGetApiResponse"/>
        /// </summary>
        public partial class ExportSpoolsExportSpoolsGetApiResponse : SpoolMan.Api.Client.ApiResponse, IExportSpoolsExportSpoolsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExportSpoolsExportSpoolsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExportSpoolsExportSpoolsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExportSpoolsExportSpoolsGetApiResponse(ILogger<ExportSpoolsExportSpoolsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatExportVendorsExportVendorsGet(ref ExportFormat fmt);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fmt"></param>
        private void AfterExportVendorsExportVendorsGetDefaultImplementation(IExportVendorsExportVendorsGetApiResponse apiResponseLocalVar, ExportFormat fmt)
        {
            bool suppressDefaultLog = false;
            AfterExportVendorsExportVendorsGet(ref suppressDefaultLog, apiResponseLocalVar, fmt);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fmt"></param>
        partial void AfterExportVendorsExportVendorsGet(ref bool suppressDefaultLog, IExportVendorsExportVendorsGetApiResponse apiResponseLocalVar, ExportFormat fmt);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fmt"></param>
        private void OnErrorExportVendorsExportVendorsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ExportFormat fmt)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorExportVendorsExportVendorsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, fmt);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="fmt"></param>
        partial void OnErrorExportVendorsExportVendorsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ExportFormat fmt);

        /// <summary>
        /// Export Vendors Export the list of vendors in various formats.
        /// </summary>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportVendorsExportVendorsGetApiResponse"/>&gt;</returns>
        public async Task<IExportVendorsExportVendorsGetApiResponse?> ExportVendorsExportVendorsGetOrDefaultAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExportVendorsExportVendorsGetAsync(fmt, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Export Vendors Export the list of vendors in various formats.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportVendorsExportVendorsGetApiResponse"/>&gt;</returns>
        public async Task<IExportVendorsExportVendorsGetApiResponse> ExportVendorsExportVendorsGetAsync(ExportFormat fmt, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatExportVendorsExportVendorsGet(ref fmt);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/export/vendors");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["fmt"] = ClientUtils.ParameterToString(fmt);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ExportVendorsExportVendorsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExportVendorsExportVendorsGetApiResponse>();

                        ExportVendorsExportVendorsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/export/vendors", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExportVendorsExportVendorsGetDefaultImplementation(apiResponseLocalVar, fmt);

                        Events.ExecuteOnExportVendorsExportVendorsGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExportVendorsExportVendorsGetDefaultImplementation(e, "/export/vendors", uriBuilderLocalVar.Path, fmt);
                Events.ExecuteOnErrorExportVendorsExportVendorsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExportVendorsExportVendorsGetApiResponse"/>
        /// </summary>
        public partial class ExportVendorsExportVendorsGetApiResponse : SpoolMan.Api.Client.ApiResponse, IExportVendorsExportVendorsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExportVendorsExportVendorsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExportVendorsExportVendorsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExportVendorsExportVendorsGetApiResponse(ILogger<ExportVendorsExportVendorsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
