// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using SpoolMan.Api.Client;
using SpoolMan.Api.Model;
using System.Diagnostics.CodeAnalysis;

namespace SpoolMan.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IVendorApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        VendorApiEvents Events { get; }

        /// <summary>
        /// Add Vendor
        /// </summary>
        /// <remarks>
        /// Add a new vendor to the database.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddVendorVendorPostApiResponse"/>&gt;</returns>
        Task<IAddVendorVendorPostApiResponse> AddVendorVendorPostAsync(VendorParameters vendorParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Vendor
        /// </summary>
        /// <remarks>
        /// Add a new vendor to the database.
        /// </remarks>
        /// <param name="vendorParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddVendorVendorPostApiResponse"/>?&gt;</returns>
        Task<IAddVendorVendorPostApiResponse?> AddVendorVendorPostOrDefaultAsync(VendorParameters vendorParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Vendor
        /// </summary>
        /// <remarks>
        /// Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVendorVendorVendorIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteVendorVendorVendorIdDeleteApiResponse> DeleteVendorVendorVendorIdDeleteAsync(int vendorId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Vendor
        /// </summary>
        /// <remarks>
        /// Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </remarks>
        /// <param name="vendorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVendorVendorVendorIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteVendorVendorVendorIdDeleteApiResponse?> DeleteVendorVendorVendorIdDeleteOrDefaultAsync(int vendorId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Vendor
        /// </summary>
        /// <remarks>
        /// Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindVendorVendorGetApiResponse"/>&gt;</returns>
        Task<IFindVendorVendorGetApiResponse> FindVendorVendorGetAsync(Option<string?> name = default, Option<string?> externalId = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find Vendor
        /// </summary>
        /// <remarks>
        /// Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindVendorVendorGetApiResponse"/>?&gt;</returns>
        Task<IFindVendorVendorGetApiResponse?> FindVendorVendorGetOrDefaultAsync(Option<string?> name = default, Option<string?> externalId = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Vendor
        /// </summary>
        /// <remarks>
        /// Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVendorVendorVendorIdGetApiResponse"/>&gt;</returns>
        Task<IGetVendorVendorVendorIdGetApiResponse> GetVendorVendorVendorIdGetAsync(int vendorId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Vendor
        /// </summary>
        /// <remarks>
        /// Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <param name="vendorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVendorVendorVendorIdGetApiResponse"/>?&gt;</returns>
        Task<IGetVendorVendorVendorIdGetApiResponse?> GetVendorVendorVendorIdGetOrDefaultAsync(int vendorId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Vendor
        /// </summary>
        /// <remarks>
        /// Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateVendorVendorVendorIdPatchApiResponse"/>&gt;</returns>
        Task<IUpdateVendorVendorVendorIdPatchApiResponse> UpdateVendorVendorVendorIdPatchAsync(int vendorId, VendorUpdateParameters vendorUpdateParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Vendor
        /// </summary>
        /// <remarks>
        /// Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateVendorVendorVendorIdPatchApiResponse"/>?&gt;</returns>
        Task<IUpdateVendorVendorVendorIdPatchApiResponse?> UpdateVendorVendorVendorIdPatchOrDefaultAsync(int vendorId, VendorUpdateParameters vendorUpdateParameters, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddVendorVendorPostApiResponse"/>
    /// </summary>
    public interface IAddVendorVendorPostApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Vendor?>, IBadRequest<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteVendorVendorVendorIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteVendorVendorVendorIdDeleteApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Message?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IFindVendorVendorGetApiResponse"/>
    /// </summary>
    public interface IFindVendorVendorGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<List<Vendor>?>, ICustomHttpStatusCode299<SpoolMan.Api.Model.VendorEvent?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 299 CustomHttpStatusCode299
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode299 { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetVendorVendorVendorIdGetApiResponse"/>
    /// </summary>
    public interface IGetVendorVendorVendorIdGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Vendor?>, ICustomHttpStatusCode299<SpoolMan.Api.Model.VendorEvent?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 299 CustomHttpStatusCode299
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode299 { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateVendorVendorVendorIdPatchApiResponse"/>
    /// </summary>
    public interface IUpdateVendorVendorVendorIdPatchApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<SpoolMan.Api.Model.Vendor?>, IBadRequest<SpoolMan.Api.Model.Message?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class VendorApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddVendorVendorPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddVendorVendorPost;

        internal void ExecuteOnAddVendorVendorPost(VendorApi.AddVendorVendorPostApiResponse apiResponse)
        {
            OnAddVendorVendorPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddVendorVendorPost(Exception exception)
        {
            OnErrorAddVendorVendorPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteVendorVendorVendorIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteVendorVendorVendorIdDelete;

        internal void ExecuteOnDeleteVendorVendorVendorIdDelete(VendorApi.DeleteVendorVendorVendorIdDeleteApiResponse apiResponse)
        {
            OnDeleteVendorVendorVendorIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteVendorVendorVendorIdDelete(Exception exception)
        {
            OnErrorDeleteVendorVendorVendorIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindVendorVendorGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindVendorVendorGet;

        internal void ExecuteOnFindVendorVendorGet(VendorApi.FindVendorVendorGetApiResponse apiResponse)
        {
            OnFindVendorVendorGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindVendorVendorGet(Exception exception)
        {
            OnErrorFindVendorVendorGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetVendorVendorVendorIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetVendorVendorVendorIdGet;

        internal void ExecuteOnGetVendorVendorVendorIdGet(VendorApi.GetVendorVendorVendorIdGetApiResponse apiResponse)
        {
            OnGetVendorVendorVendorIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetVendorVendorVendorIdGet(Exception exception)
        {
            OnErrorGetVendorVendorVendorIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateVendorVendorVendorIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateVendorVendorVendorIdPatch;

        internal void ExecuteOnUpdateVendorVendorVendorIdPatch(VendorApi.UpdateVendorVendorVendorIdPatchApiResponse apiResponse)
        {
            OnUpdateVendorVendorVendorIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateVendorVendorVendorIdPatch(Exception exception)
        {
            OnErrorUpdateVendorVendorVendorIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class VendorApi : IVendorApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<VendorApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public VendorApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VendorApi(ILogger<VendorApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, VendorApiEvents vendorApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<VendorApi>();
            HttpClient = httpClient;
            Events = vendorApiEvents;
        }

        partial void FormatAddVendorVendorPost(VendorParameters vendorParameters);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="vendorParameters"></param>
        /// <returns></returns>
        private void ValidateAddVendorVendorPost(VendorParameters vendorParameters)
        {
            if (vendorParameters == null)
                throw new ArgumentNullException(nameof(vendorParameters));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="vendorParameters"></param>
        private void AfterAddVendorVendorPostDefaultImplementation(IAddVendorVendorPostApiResponse apiResponseLocalVar, VendorParameters vendorParameters)
        {
            bool suppressDefaultLog = false;
            AfterAddVendorVendorPost(ref suppressDefaultLog, apiResponseLocalVar, vendorParameters);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="vendorParameters"></param>
        partial void AfterAddVendorVendorPost(ref bool suppressDefaultLog, IAddVendorVendorPostApiResponse apiResponseLocalVar, VendorParameters vendorParameters);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="vendorParameters"></param>
        private void OnErrorAddVendorVendorPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, VendorParameters vendorParameters)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddVendorVendorPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, vendorParameters);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="vendorParameters"></param>
        partial void OnErrorAddVendorVendorPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, VendorParameters vendorParameters);

        /// <summary>
        /// Add Vendor Add a new vendor to the database.
        /// </summary>
        /// <param name="vendorParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddVendorVendorPostApiResponse"/>&gt;</returns>
        public async Task<IAddVendorVendorPostApiResponse?> AddVendorVendorPostOrDefaultAsync(VendorParameters vendorParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddVendorVendorPostAsync(vendorParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Vendor Add a new vendor to the database.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddVendorVendorPostApiResponse"/>&gt;</returns>
        public async Task<IAddVendorVendorPostApiResponse> AddVendorVendorPostAsync(VendorParameters vendorParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddVendorVendorPost(vendorParameters);

                FormatAddVendorVendorPost(vendorParameters);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/vendor");

                    httpRequestMessageLocalVar.Content = (vendorParameters as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(vendorParameters, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddVendorVendorPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddVendorVendorPostApiResponse>();

                        AddVendorVendorPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/vendor", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddVendorVendorPostDefaultImplementation(apiResponseLocalVar, vendorParameters);

                        Events.ExecuteOnAddVendorVendorPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddVendorVendorPostDefaultImplementation(e, "/vendor", uriBuilderLocalVar.Path, vendorParameters);
                Events.ExecuteOnErrorAddVendorVendorPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddVendorVendorPostApiResponse"/>
        /// </summary>
        public partial class AddVendorVendorPostApiResponse : SpoolMan.Api.Client.ApiResponse, IAddVendorVendorPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddVendorVendorPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddVendorVendorPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddVendorVendorPostApiResponse(ILogger<AddVendorVendorPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Vendor? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Vendor>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Vendor? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteVendorVendorVendorIdDelete(ref int vendorId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="vendorId"></param>
        private void AfterDeleteVendorVendorVendorIdDeleteDefaultImplementation(IDeleteVendorVendorVendorIdDeleteApiResponse apiResponseLocalVar, int vendorId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteVendorVendorVendorIdDelete(ref suppressDefaultLog, apiResponseLocalVar, vendorId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="vendorId"></param>
        partial void AfterDeleteVendorVendorVendorIdDelete(ref bool suppressDefaultLog, IDeleteVendorVendorVendorIdDeleteApiResponse apiResponseLocalVar, int vendorId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="vendorId"></param>
        private void OnErrorDeleteVendorVendorVendorIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int vendorId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteVendorVendorVendorIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, vendorId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="vendorId"></param>
        partial void OnErrorDeleteVendorVendorVendorIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int vendorId);

        /// <summary>
        /// Delete Vendor Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </summary>
        /// <param name="vendorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVendorVendorVendorIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteVendorVendorVendorIdDeleteApiResponse?> DeleteVendorVendorVendorIdDeleteOrDefaultAsync(int vendorId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteVendorVendorVendorIdDeleteAsync(vendorId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Vendor Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteVendorVendorVendorIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteVendorVendorVendorIdDeleteApiResponse> DeleteVendorVendorVendorIdDeleteAsync(int vendorId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteVendorVendorVendorIdDelete(ref vendorId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/vendor/{vendor_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bvendor_id%7D", Uri.EscapeDataString(vendorId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteVendorVendorVendorIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteVendorVendorVendorIdDeleteApiResponse>();

                        DeleteVendorVendorVendorIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/vendor/{vendor_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteVendorVendorVendorIdDeleteDefaultImplementation(apiResponseLocalVar, vendorId);

                        Events.ExecuteOnDeleteVendorVendorVendorIdDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteVendorVendorVendorIdDeleteDefaultImplementation(e, "/vendor/{vendor_id}", uriBuilderLocalVar.Path, vendorId);
                Events.ExecuteOnErrorDeleteVendorVendorVendorIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteVendorVendorVendorIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteVendorVendorVendorIdDeleteApiResponse : SpoolMan.Api.Client.ApiResponse, IDeleteVendorVendorVendorIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteVendorVendorVendorIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteVendorVendorVendorIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteVendorVendorVendorIdDeleteApiResponse(ILogger<DeleteVendorVendorVendorIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindVendorVendorGet(ref Option<string?> name, ref Option<string?> externalId, ref Option<string?> sort, ref Option<int?> limit, ref Option<int> offset);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="externalId"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterFindVendorVendorGetDefaultImplementation(IFindVendorVendorGetApiResponse apiResponseLocalVar, Option<string?> name, Option<string?> externalId, Option<string?> sort, Option<int?> limit, Option<int> offset)
        {
            bool suppressDefaultLog = false;
            AfterFindVendorVendorGet(ref suppressDefaultLog, apiResponseLocalVar, name, externalId, sort, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="externalId"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterFindVendorVendorGet(ref bool suppressDefaultLog, IFindVendorVendorGetApiResponse apiResponseLocalVar, Option<string?> name, Option<string?> externalId, Option<string?> sort, Option<int?> limit, Option<int> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="externalId"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorFindVendorVendorGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> name, Option<string?> externalId, Option<string?> sort, Option<int?> limit, Option<int> offset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindVendorVendorGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, name, externalId, sort, limit, offset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="externalId"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorFindVendorVendorGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> name, Option<string?> externalId, Option<string?> sort, Option<int?> limit, Option<int> offset);

        /// <summary>
        /// Find Vendor Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindVendorVendorGetApiResponse"/>&gt;</returns>
        public async Task<IFindVendorVendorGetApiResponse?> FindVendorVendorGetOrDefaultAsync(Option<string?> name = default, Option<string?> externalId = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindVendorVendorGetAsync(name, externalId, sort, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Find Vendor Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindVendorVendorGetApiResponse"/>&gt;</returns>
        public async Task<IFindVendorVendorGetApiResponse> FindVendorVendorGetAsync(Option<string?> name = default, Option<string?> externalId = default, Option<string?> sort = default, Option<int?> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatFindVendorVendorGet(ref name, ref externalId, ref sort, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/vendor");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (name.IsSet)
                        parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name.Value);

                    if (externalId.IsSet)
                        parseQueryStringLocalVar["external_id"] = ClientUtils.ParameterToString(externalId.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindVendorVendorGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindVendorVendorGetApiResponse>();

                        FindVendorVendorGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/vendor", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindVendorVendorGetDefaultImplementation(apiResponseLocalVar, name, externalId, sort, limit, offset);

                        Events.ExecuteOnFindVendorVendorGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindVendorVendorGetDefaultImplementation(e, "/vendor", uriBuilderLocalVar.Path, name, externalId, sort, limit, offset);
                Events.ExecuteOnErrorFindVendorVendorGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindVendorVendorGetApiResponse"/>
        /// </summary>
        public partial class FindVendorVendorGetApiResponse : SpoolMan.Api.Client.ApiResponse, IFindVendorVendorGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindVendorVendorGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindVendorVendorGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindVendorVendorGetApiResponse(ILogger<FindVendorVendorGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Vendor>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Vendor>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Vendor>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode299 => 299 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.VendorEvent? CustomHttpStatusCode299()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode299
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.VendorEvent>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299 and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode299([NotNullWhen(true)]out SpoolMan.Api.Model.VendorEvent? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode299();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)299);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetVendorVendorVendorIdGet(ref int vendorId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="vendorId"></param>
        private void AfterGetVendorVendorVendorIdGetDefaultImplementation(IGetVendorVendorVendorIdGetApiResponse apiResponseLocalVar, int vendorId)
        {
            bool suppressDefaultLog = false;
            AfterGetVendorVendorVendorIdGet(ref suppressDefaultLog, apiResponseLocalVar, vendorId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="vendorId"></param>
        partial void AfterGetVendorVendorVendorIdGet(ref bool suppressDefaultLog, IGetVendorVendorVendorIdGetApiResponse apiResponseLocalVar, int vendorId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="vendorId"></param>
        private void OnErrorGetVendorVendorVendorIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int vendorId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetVendorVendorVendorIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, vendorId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="vendorId"></param>
        partial void OnErrorGetVendorVendorVendorIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int vendorId);

        /// <summary>
        /// Get Vendor Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <param name="vendorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVendorVendorVendorIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetVendorVendorVendorIdGetApiResponse?> GetVendorVendorVendorIdGetOrDefaultAsync(int vendorId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetVendorVendorVendorIdGetAsync(vendorId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Vendor Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVendorVendorVendorIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetVendorVendorVendorIdGetApiResponse> GetVendorVendorVendorIdGetAsync(int vendorId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetVendorVendorVendorIdGet(ref vendorId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/vendor/{vendor_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bvendor_id%7D", Uri.EscapeDataString(vendorId.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetVendorVendorVendorIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetVendorVendorVendorIdGetApiResponse>();

                        GetVendorVendorVendorIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/vendor/{vendor_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetVendorVendorVendorIdGetDefaultImplementation(apiResponseLocalVar, vendorId);

                        Events.ExecuteOnGetVendorVendorVendorIdGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetVendorVendorVendorIdGetDefaultImplementation(e, "/vendor/{vendor_id}", uriBuilderLocalVar.Path, vendorId);
                Events.ExecuteOnErrorGetVendorVendorVendorIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetVendorVendorVendorIdGetApiResponse"/>
        /// </summary>
        public partial class GetVendorVendorVendorIdGetApiResponse : SpoolMan.Api.Client.ApiResponse, IGetVendorVendorVendorIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetVendorVendorVendorIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetVendorVendorVendorIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetVendorVendorVendorIdGetApiResponse(ILogger<GetVendorVendorVendorIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Vendor? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Vendor>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Vendor? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode299 => 299 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 299 CustomHttpStatusCode299
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.VendorEvent? CustomHttpStatusCode299()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode299
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.VendorEvent>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 299 CustomHttpStatusCode299 and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode299([NotNullWhen(true)]out SpoolMan.Api.Model.VendorEvent? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode299();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)299);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateVendorVendorVendorIdPatch(ref int vendorId, VendorUpdateParameters vendorUpdateParameters);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="vendorUpdateParameters"></param>
        /// <returns></returns>
        private void ValidateUpdateVendorVendorVendorIdPatch(VendorUpdateParameters vendorUpdateParameters)
        {
            if (vendorUpdateParameters == null)
                throw new ArgumentNullException(nameof(vendorUpdateParameters));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        private void AfterUpdateVendorVendorVendorIdPatchDefaultImplementation(IUpdateVendorVendorVendorIdPatchApiResponse apiResponseLocalVar, int vendorId, VendorUpdateParameters vendorUpdateParameters)
        {
            bool suppressDefaultLog = false;
            AfterUpdateVendorVendorVendorIdPatch(ref suppressDefaultLog, apiResponseLocalVar, vendorId, vendorUpdateParameters);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        partial void AfterUpdateVendorVendorVendorIdPatch(ref bool suppressDefaultLog, IUpdateVendorVendorVendorIdPatchApiResponse apiResponseLocalVar, int vendorId, VendorUpdateParameters vendorUpdateParameters);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        private void OnErrorUpdateVendorVendorVendorIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int vendorId, VendorUpdateParameters vendorUpdateParameters)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateVendorVendorVendorIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, vendorId, vendorUpdateParameters);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        partial void OnErrorUpdateVendorVendorVendorIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int vendorId, VendorUpdateParameters vendorUpdateParameters);

        /// <summary>
        /// Update Vendor Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateVendorVendorVendorIdPatchApiResponse"/>&gt;</returns>
        public async Task<IUpdateVendorVendorVendorIdPatchApiResponse?> UpdateVendorVendorVendorIdPatchOrDefaultAsync(int vendorId, VendorUpdateParameters vendorUpdateParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateVendorVendorVendorIdPatchAsync(vendorId, vendorUpdateParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Vendor Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateVendorVendorVendorIdPatchApiResponse"/>&gt;</returns>
        public async Task<IUpdateVendorVendorVendorIdPatchApiResponse> UpdateVendorVendorVendorIdPatchAsync(int vendorId, VendorUpdateParameters vendorUpdateParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateVendorVendorVendorIdPatch(vendorUpdateParameters);

                FormatUpdateVendorVendorVendorIdPatch(ref vendorId, vendorUpdateParameters);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/vendor/{vendor_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bvendor_id%7D", Uri.EscapeDataString(vendorId.ToString()));

                    httpRequestMessageLocalVar.Content = (vendorUpdateParameters as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(vendorUpdateParameters, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateVendorVendorVendorIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateVendorVendorVendorIdPatchApiResponse>();

                        UpdateVendorVendorVendorIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/vendor/{vendor_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateVendorVendorVendorIdPatchDefaultImplementation(apiResponseLocalVar, vendorId, vendorUpdateParameters);

                        Events.ExecuteOnUpdateVendorVendorVendorIdPatch(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateVendorVendorVendorIdPatchDefaultImplementation(e, "/vendor/{vendor_id}", uriBuilderLocalVar.Path, vendorId, vendorUpdateParameters);
                Events.ExecuteOnErrorUpdateVendorVendorVendorIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateVendorVendorVendorIdPatchApiResponse"/>
        /// </summary>
        public partial class UpdateVendorVendorVendorIdPatchApiResponse : SpoolMan.Api.Client.ApiResponse, IUpdateVendorVendorVendorIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateVendorVendorVendorIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateVendorVendorVendorIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateVendorVendorVendorIdPatchApiResponse(ILogger<UpdateVendorVendorVendorIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Vendor? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Vendor>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out SpoolMan.Api.Model.Vendor? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
