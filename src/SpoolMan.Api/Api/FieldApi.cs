// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using SpoolMan.Api.Client;
using SpoolMan.Api.Model;
using System.Diagnostics.CodeAnalysis;

namespace SpoolMan.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFieldApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FieldApiEvents Events { get; }

        /// <summary>
        /// Add Or Update Extra Field
        /// </summary>
        /// <remarks>
        /// Add or update an extra field for a specific entity type. Returns the full list of extra fields for the entity type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="key"></param>
        /// <param name="extraFieldParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse"/>&gt;</returns>
        Task<IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse> AddOrUpdateExtraFieldFieldEntityTypeKeyPostAsync(EntityType entityType, string key, ExtraFieldParameters extraFieldParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Or Update Extra Field
        /// </summary>
        /// <remarks>
        /// Add or update an extra field for a specific entity type. Returns the full list of extra fields for the entity type.
        /// </remarks>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="key"></param>
        /// <param name="extraFieldParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse"/>?&gt;</returns>
        Task<IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse?> AddOrUpdateExtraFieldFieldEntityTypeKeyPostOrDefaultAsync(EntityType entityType, string key, ExtraFieldParameters extraFieldParameters, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Extra Field
        /// </summary>
        /// <remarks>
        /// Delete an extra field for a specific entity type. Returns the full list of extra fields for the entity type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse> DeleteExtraFieldFieldEntityTypeKeyDeleteAsync(EntityType entityType, string key, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Extra Field
        /// </summary>
        /// <remarks>
        /// Delete an extra field for a specific entity type. Returns the full list of extra fields for the entity type.
        /// </remarks>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse?> DeleteExtraFieldFieldEntityTypeKeyDeleteOrDefaultAsync(EntityType entityType, string key, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Extra Fields
        /// </summary>
        /// <remarks>
        /// Get all extra fields for a specific entity type.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExtraFieldsFieldEntityTypeGetApiResponse"/>&gt;</returns>
        Task<IGetExtraFieldsFieldEntityTypeGetApiResponse> GetExtraFieldsFieldEntityTypeGetAsync(EntityType entityType, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Extra Fields
        /// </summary>
        /// <remarks>
        /// Get all extra fields for a specific entity type.
        /// </remarks>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExtraFieldsFieldEntityTypeGetApiResponse"/>?&gt;</returns>
        Task<IGetExtraFieldsFieldEntityTypeGetApiResponse?> GetExtraFieldsFieldEntityTypeGetOrDefaultAsync(EntityType entityType, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse"/>
    /// </summary>
    public interface IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<List<ExtraField>?>, IBadRequest<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<List<ExtraField>?>, INotFound<SpoolMan.Api.Model.Message?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetExtraFieldsFieldEntityTypeGetApiResponse"/>
    /// </summary>
    public interface IGetExtraFieldsFieldEntityTypeGetApiResponse : SpoolMan.Api.Client.IApiResponse, IOk<List<ExtraField>?>, IUnprocessableContent<SpoolMan.Api.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FieldApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddOrUpdateExtraFieldFieldEntityTypeKeyPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddOrUpdateExtraFieldFieldEntityTypeKeyPost;

        internal void ExecuteOnAddOrUpdateExtraFieldFieldEntityTypeKeyPost(FieldApi.AddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse apiResponse)
        {
            OnAddOrUpdateExtraFieldFieldEntityTypeKeyPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddOrUpdateExtraFieldFieldEntityTypeKeyPost(Exception exception)
        {
            OnErrorAddOrUpdateExtraFieldFieldEntityTypeKeyPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteExtraFieldFieldEntityTypeKeyDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteExtraFieldFieldEntityTypeKeyDelete;

        internal void ExecuteOnDeleteExtraFieldFieldEntityTypeKeyDelete(FieldApi.DeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse apiResponse)
        {
            OnDeleteExtraFieldFieldEntityTypeKeyDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteExtraFieldFieldEntityTypeKeyDelete(Exception exception)
        {
            OnErrorDeleteExtraFieldFieldEntityTypeKeyDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetExtraFieldsFieldEntityTypeGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetExtraFieldsFieldEntityTypeGet;

        internal void ExecuteOnGetExtraFieldsFieldEntityTypeGet(FieldApi.GetExtraFieldsFieldEntityTypeGetApiResponse apiResponse)
        {
            OnGetExtraFieldsFieldEntityTypeGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetExtraFieldsFieldEntityTypeGet(Exception exception)
        {
            OnErrorGetExtraFieldsFieldEntityTypeGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FieldApi : IFieldApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FieldApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FieldApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FieldApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FieldApi(ILogger<FieldApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FieldApiEvents fieldApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FieldApi>();
            HttpClient = httpClient;
            Events = fieldApiEvents;
        }

        partial void FormatAddOrUpdateExtraFieldFieldEntityTypeKeyPost(ref EntityType entityType, ref string key, ExtraFieldParameters extraFieldParameters);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="key"></param>
        /// <param name="extraFieldParameters"></param>
        /// <returns></returns>
        private void ValidateAddOrUpdateExtraFieldFieldEntityTypeKeyPost(string key, ExtraFieldParameters extraFieldParameters)
        {
            if (key == null)
                throw new ArgumentNullException(nameof(key));

            if (extraFieldParameters == null)
                throw new ArgumentNullException(nameof(extraFieldParameters));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityType"></param>
        /// <param name="key"></param>
        /// <param name="extraFieldParameters"></param>
        private void AfterAddOrUpdateExtraFieldFieldEntityTypeKeyPostDefaultImplementation(IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse apiResponseLocalVar, EntityType entityType, string key, ExtraFieldParameters extraFieldParameters)
        {
            bool suppressDefaultLog = false;
            AfterAddOrUpdateExtraFieldFieldEntityTypeKeyPost(ref suppressDefaultLog, apiResponseLocalVar, entityType, key, extraFieldParameters);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityType"></param>
        /// <param name="key"></param>
        /// <param name="extraFieldParameters"></param>
        partial void AfterAddOrUpdateExtraFieldFieldEntityTypeKeyPost(ref bool suppressDefaultLog, IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse apiResponseLocalVar, EntityType entityType, string key, ExtraFieldParameters extraFieldParameters);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityType"></param>
        /// <param name="key"></param>
        /// <param name="extraFieldParameters"></param>
        private void OnErrorAddOrUpdateExtraFieldFieldEntityTypeKeyPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EntityType entityType, string key, ExtraFieldParameters extraFieldParameters)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddOrUpdateExtraFieldFieldEntityTypeKeyPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityType, key, extraFieldParameters);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityType"></param>
        /// <param name="key"></param>
        /// <param name="extraFieldParameters"></param>
        partial void OnErrorAddOrUpdateExtraFieldFieldEntityTypeKeyPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EntityType entityType, string key, ExtraFieldParameters extraFieldParameters);

        /// <summary>
        /// Add Or Update Extra Field Add or update an extra field for a specific entity type. Returns the full list of extra fields for the entity type.
        /// </summary>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="key"></param>
        /// <param name="extraFieldParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse"/>&gt;</returns>
        public async Task<IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse?> AddOrUpdateExtraFieldFieldEntityTypeKeyPostOrDefaultAsync(EntityType entityType, string key, ExtraFieldParameters extraFieldParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddOrUpdateExtraFieldFieldEntityTypeKeyPostAsync(entityType, key, extraFieldParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Or Update Extra Field Add or update an extra field for a specific entity type. Returns the full list of extra fields for the entity type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="key"></param>
        /// <param name="extraFieldParameters"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse"/>&gt;</returns>
        public async Task<IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse> AddOrUpdateExtraFieldFieldEntityTypeKeyPostAsync(EntityType entityType, string key, ExtraFieldParameters extraFieldParameters, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddOrUpdateExtraFieldFieldEntityTypeKeyPost(key, extraFieldParameters);

                FormatAddOrUpdateExtraFieldFieldEntityTypeKeyPost(ref entityType, ref key, extraFieldParameters);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/field/{entity_type}/{key}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bentity_type%7D", Uri.EscapeDataString(entityType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bkey%7D", Uri.EscapeDataString(key.ToString()));

                    httpRequestMessageLocalVar.Content = (extraFieldParameters as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(extraFieldParameters, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse>();

                        AddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/field/{entity_type}/{key}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddOrUpdateExtraFieldFieldEntityTypeKeyPostDefaultImplementation(apiResponseLocalVar, entityType, key, extraFieldParameters);

                        Events.ExecuteOnAddOrUpdateExtraFieldFieldEntityTypeKeyPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddOrUpdateExtraFieldFieldEntityTypeKeyPostDefaultImplementation(e, "/field/{entity_type}/{key}", uriBuilderLocalVar.Path, entityType, key, extraFieldParameters);
                Events.ExecuteOnErrorAddOrUpdateExtraFieldFieldEntityTypeKeyPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse"/>
        /// </summary>
        public partial class AddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse : SpoolMan.Api.Client.ApiResponse, IAddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse(ILogger<AddOrUpdateExtraFieldFieldEntityTypeKeyPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ExtraField>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ExtraField>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ExtraField>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteExtraFieldFieldEntityTypeKeyDelete(ref EntityType entityType, ref string key);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        private void ValidateDeleteExtraFieldFieldEntityTypeKeyDelete(string key)
        {
            if (key == null)
                throw new ArgumentNullException(nameof(key));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityType"></param>
        /// <param name="key"></param>
        private void AfterDeleteExtraFieldFieldEntityTypeKeyDeleteDefaultImplementation(IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse apiResponseLocalVar, EntityType entityType, string key)
        {
            bool suppressDefaultLog = false;
            AfterDeleteExtraFieldFieldEntityTypeKeyDelete(ref suppressDefaultLog, apiResponseLocalVar, entityType, key);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityType"></param>
        /// <param name="key"></param>
        partial void AfterDeleteExtraFieldFieldEntityTypeKeyDelete(ref bool suppressDefaultLog, IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse apiResponseLocalVar, EntityType entityType, string key);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityType"></param>
        /// <param name="key"></param>
        private void OnErrorDeleteExtraFieldFieldEntityTypeKeyDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EntityType entityType, string key)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteExtraFieldFieldEntityTypeKeyDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityType, key);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityType"></param>
        /// <param name="key"></param>
        partial void OnErrorDeleteExtraFieldFieldEntityTypeKeyDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EntityType entityType, string key);

        /// <summary>
        /// Delete Extra Field Delete an extra field for a specific entity type. Returns the full list of extra fields for the entity type.
        /// </summary>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse?> DeleteExtraFieldFieldEntityTypeKeyDeleteOrDefaultAsync(EntityType entityType, string key, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteExtraFieldFieldEntityTypeKeyDeleteAsync(entityType, key, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Extra Field Delete an extra field for a specific entity type. Returns the full list of extra fields for the entity type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="key"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse> DeleteExtraFieldFieldEntityTypeKeyDeleteAsync(EntityType entityType, string key, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteExtraFieldFieldEntityTypeKeyDelete(key);

                FormatDeleteExtraFieldFieldEntityTypeKeyDelete(ref entityType, ref key);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/field/{entity_type}/{key}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bentity_type%7D", Uri.EscapeDataString(entityType.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bkey%7D", Uri.EscapeDataString(key.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse>();

                        DeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/field/{entity_type}/{key}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteExtraFieldFieldEntityTypeKeyDeleteDefaultImplementation(apiResponseLocalVar, entityType, key);

                        Events.ExecuteOnDeleteExtraFieldFieldEntityTypeKeyDelete(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteExtraFieldFieldEntityTypeKeyDeleteDefaultImplementation(e, "/field/{entity_type}/{key}", uriBuilderLocalVar.Path, entityType, key);
                Events.ExecuteOnErrorDeleteExtraFieldFieldEntityTypeKeyDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse : SpoolMan.Api.Client.ApiResponse, IDeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse(ILogger<DeleteExtraFieldFieldEntityTypeKeyDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ExtraField>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ExtraField>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ExtraField>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.Message? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out SpoolMan.Api.Model.Message? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetExtraFieldsFieldEntityTypeGet(ref EntityType entityType);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityType"></param>
        private void AfterGetExtraFieldsFieldEntityTypeGetDefaultImplementation(IGetExtraFieldsFieldEntityTypeGetApiResponse apiResponseLocalVar, EntityType entityType)
        {
            bool suppressDefaultLog = false;
            AfterGetExtraFieldsFieldEntityTypeGet(ref suppressDefaultLog, apiResponseLocalVar, entityType);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityType"></param>
        partial void AfterGetExtraFieldsFieldEntityTypeGet(ref bool suppressDefaultLog, IGetExtraFieldsFieldEntityTypeGetApiResponse apiResponseLocalVar, EntityType entityType);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityType"></param>
        private void OnErrorGetExtraFieldsFieldEntityTypeGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EntityType entityType)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetExtraFieldsFieldEntityTypeGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityType);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityType"></param>
        partial void OnErrorGetExtraFieldsFieldEntityTypeGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EntityType entityType);

        /// <summary>
        /// Get Extra Fields Get all extra fields for a specific entity type.
        /// </summary>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExtraFieldsFieldEntityTypeGetApiResponse"/>&gt;</returns>
        public async Task<IGetExtraFieldsFieldEntityTypeGetApiResponse?> GetExtraFieldsFieldEntityTypeGetOrDefaultAsync(EntityType entityType, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetExtraFieldsFieldEntityTypeGetAsync(entityType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Extra Fields Get all extra fields for a specific entity type.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetExtraFieldsFieldEntityTypeGetApiResponse"/>&gt;</returns>
        public async Task<IGetExtraFieldsFieldEntityTypeGetApiResponse> GetExtraFieldsFieldEntityTypeGetAsync(EntityType entityType, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetExtraFieldsFieldEntityTypeGet(ref entityType);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = string.Concat(HttpClient.BaseAddress.AbsolutePath, "/field/{entity_type}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bentity_type%7D", Uri.EscapeDataString(entityType.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetExtraFieldsFieldEntityTypeGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetExtraFieldsFieldEntityTypeGetApiResponse>();

                        GetExtraFieldsFieldEntityTypeGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/field/{entity_type}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetExtraFieldsFieldEntityTypeGetDefaultImplementation(apiResponseLocalVar, entityType);

                        Events.ExecuteOnGetExtraFieldsFieldEntityTypeGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetExtraFieldsFieldEntityTypeGetDefaultImplementation(e, "/field/{entity_type}", uriBuilderLocalVar.Path, entityType);
                Events.ExecuteOnErrorGetExtraFieldsFieldEntityTypeGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetExtraFieldsFieldEntityTypeGetApiResponse"/>
        /// </summary>
        public partial class GetExtraFieldsFieldEntityTypeGetApiResponse : SpoolMan.Api.Client.ApiResponse, IGetExtraFieldsFieldEntityTypeGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetExtraFieldsFieldEntityTypeGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetExtraFieldsFieldEntityTypeGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetExtraFieldsFieldEntityTypeGetApiResponse(ILogger<GetExtraFieldsFieldEntityTypeGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ExtraField>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ExtraField>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ExtraField>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public SpoolMan.Api.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<SpoolMan.Api.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out SpoolMan.Api.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
