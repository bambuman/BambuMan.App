// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using SpoolMan.Api.Client;

namespace SpoolMan.Api.Model
{
    /// <summary>
    /// The type of a setting.
    /// </summary>
    /// <value>The type of a setting.</value>
    public enum SettingType
    {
        /// <summary>
        /// Enum Boolean for value: boolean
        /// </summary>
        Boolean = 1,

        /// <summary>
        /// Enum Number for value: number
        /// </summary>
        Number = 2,

        /// <summary>
        /// Enum String for value: string
        /// </summary>
        String = 3,

        /// <summary>
        /// Enum Array for value: array
        /// </summary>
        Array = 4,

        /// <summary>
        /// Enum Object for value: object
        /// </summary>
        Object = 5
    }

    /// <summary>
    /// Converts <see cref="SettingType"/> to and from the JSON value
    /// </summary>
    public static class SettingTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SettingType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SettingType FromString(string value)
        {
            if (value.Equals("boolean"))
                return SettingType.Boolean;

            if (value.Equals("number"))
                return SettingType.Number;

            if (value.Equals("string"))
                return SettingType.String;

            if (value.Equals("array"))
                return SettingType.Array;

            if (value.Equals("object"))
                return SettingType.Object;

            throw new NotImplementedException($"Could not convert value to type SettingType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="SettingType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SettingType? FromStringOrDefault(string value)
        {
            if (value.Equals("boolean"))
                return SettingType.Boolean;

            if (value.Equals("number"))
                return SettingType.Number;

            if (value.Equals("string"))
                return SettingType.String;

            if (value.Equals("array"))
                return SettingType.Array;

            if (value.Equals("object"))
                return SettingType.Object;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SettingType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(SettingType value)
        {
            if (value == SettingType.Boolean)
                return "boolean";

            if (value == SettingType.Number)
                return "number";

            if (value == SettingType.String)
                return "string";

            if (value == SettingType.Array)
                return "array";

            if (value == SettingType.Object)
                return "object";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SettingType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SettingTypeJsonConverter : JsonConverter<SettingType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SettingType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SettingType? result = rawValue == null
                ? null
                : SettingTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the SettingType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="settingType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SettingType settingType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(settingType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SettingType"/>
    /// </summary>
    public class SettingTypeNullableJsonConverter : JsonConverter<SettingType?>
    {
        /// <summary>
        /// Returns a SettingType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SettingType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            SettingType? result = rawValue == null
                ? null
                : SettingTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="settingType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SettingType? settingType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(settingType?.ToString() ?? "null");
        }
    }
}
