// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using SpoolMan.Api.Client;

namespace SpoolMan.Api.Model
{
    /// <summary>
    /// ExternalFilament
    /// </summary>
    public partial class ExternalFilament : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalFilament" /> class.
        /// </summary>
        /// <param name="id">A unique ID for this filament.</param>
        /// <param name="manufacturer">Filament manufacturer.</param>
        /// <param name="name">Filament name.</param>
        /// <param name="material">Filament material.</param>
        /// <param name="density">Density in g/cm3.</param>
        /// <param name="weight">Net weight of a single spool.</param>
        /// <param name="diameter">Filament in mm.</param>
        /// <param name="spoolWeight">spoolWeight</param>
        /// <param name="spoolType">spoolType</param>
        /// <param name="colorHex">colorHex</param>
        /// <param name="colorHexes">colorHexes</param>
        /// <param name="extruderTemp">extruderTemp</param>
        /// <param name="bedTemp">bedTemp</param>
        /// <param name="finish">finish</param>
        /// <param name="multiColorDirection">multiColorDirection</param>
        /// <param name="pattern">pattern</param>
        /// <param name="translucent">Whether the filament is translucent. (default to false)</param>
        /// <param name="glow">Whether the filament is glow-in-the-dark. (default to false)</param>
        [JsonConstructor]
        public ExternalFilament(string id, string manufacturer, string name, string material, decimal density, decimal weight, decimal diameter, Option<decimal?> spoolWeight = default, Option<SpoolType?> spoolType = default, Option<string?> colorHex = default, Option<List<string>?> colorHexes = default, Option<int?> extruderTemp = default, Option<int?> bedTemp = default, Option<Finish?> finish = default, Option<SpoolmanExternaldbMultiColorDirection?> multiColorDirection = default, Option<Pattern?> pattern = default, Option<bool?> translucent = default, Option<bool?> glow = default)
        {
            Id = id;
            Manufacturer = manufacturer;
            Name = name;
            Material = material;
            Density = density;
            Weight = weight;
            Diameter = diameter;
            SpoolWeightOption = spoolWeight;
            SpoolTypeOption = spoolType;
            ColorHexOption = colorHex;
            ColorHexesOption = colorHexes;
            ExtruderTempOption = extruderTemp;
            BedTempOption = bedTemp;
            FinishOption = finish;
            MultiColorDirectionOption = multiColorDirection;
            PatternOption = pattern;
            TranslucentOption = translucent;
            GlowOption = glow;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SpoolType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SpoolType?> SpoolTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SpoolType
        /// </summary>
        [JsonPropertyName("spool_type")]
        public SpoolType? SpoolType { get { return this.SpoolTypeOption; } set { this.SpoolTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Finish
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Finish?> FinishOption { get; private set; }

        /// <summary>
        /// Gets or Sets Finish
        /// </summary>
        [JsonPropertyName("finish")]
        public Finish? Finish { get { return this.FinishOption; } set { this.FinishOption = new(value); } }

        /// <summary>
        /// Used to track the state of MultiColorDirection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SpoolmanExternaldbMultiColorDirection?> MultiColorDirectionOption { get; private set; }

        /// <summary>
        /// Gets or Sets MultiColorDirection
        /// </summary>
        [JsonPropertyName("multi_color_direction")]
        public SpoolmanExternaldbMultiColorDirection? MultiColorDirection { get { return this.MultiColorDirectionOption; } set { this.MultiColorDirectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pattern
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Pattern?> PatternOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        [JsonPropertyName("pattern")]
        public Pattern? Pattern { get { return this.PatternOption; } set { this.PatternOption = new(value); } }

        /// <summary>
        /// A unique ID for this filament.
        /// </summary>
        /// <value>A unique ID for this filament.</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Filament manufacturer.
        /// </summary>
        /// <value>Filament manufacturer.</value>
        [JsonPropertyName("manufacturer")]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Filament name.
        /// </summary>
        /// <value>Filament name.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Filament material.
        /// </summary>
        /// <value>Filament material.</value>
        [JsonPropertyName("material")]
        public string Material { get; set; }

        /// <summary>
        /// Density in g/cm3.
        /// </summary>
        /// <value>Density in g/cm3.</value>
        [JsonPropertyName("density")]
        public decimal Density { get; set; }

        /// <summary>
        /// Net weight of a single spool.
        /// </summary>
        /// <value>Net weight of a single spool.</value>
        [JsonPropertyName("weight")]
        public decimal Weight { get; set; }

        /// <summary>
        /// Filament in mm.
        /// </summary>
        /// <value>Filament in mm.</value>
        [JsonPropertyName("diameter")]
        public decimal Diameter { get; set; }

        /// <summary>
        /// Used to track the state of SpoolWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> SpoolWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets SpoolWeight
        /// </summary>
        [JsonPropertyName("spool_weight")]
        public decimal? SpoolWeight { get { return this.SpoolWeightOption; } set { this.SpoolWeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of ColorHex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorHexOption { get; private set; }

        /// <summary>
        /// Gets or Sets ColorHex
        /// </summary>
        [JsonPropertyName("color_hex")]
        public string? ColorHex { get { return this.ColorHexOption; } set { this.ColorHexOption = new(value); } }

        /// <summary>
        /// Used to track the state of ColorHexes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ColorHexesOption { get; private set; }

        /// <summary>
        /// Gets or Sets ColorHexes
        /// </summary>
        [JsonPropertyName("color_hexes")]
        public List<string>? ColorHexes { get { return this.ColorHexesOption; } set { this.ColorHexesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExtruderTemp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExtruderTempOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtruderTemp
        /// </summary>
        [JsonPropertyName("extruder_temp")]
        public int? ExtruderTemp { get { return this.ExtruderTempOption; } set { this.ExtruderTempOption = new(value); } }

        /// <summary>
        /// Used to track the state of BedTemp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BedTempOption { get; private set; }

        /// <summary>
        /// Gets or Sets BedTemp
        /// </summary>
        [JsonPropertyName("bed_temp")]
        public int? BedTemp { get { return this.BedTempOption; } set { this.BedTempOption = new(value); } }

        /// <summary>
        /// Used to track the state of Translucent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TranslucentOption { get; private set; }

        /// <summary>
        /// Whether the filament is translucent.
        /// </summary>
        /// <value>Whether the filament is translucent.</value>
        [JsonPropertyName("translucent")]
        public bool? Translucent { get { return this.TranslucentOption; } set { this.TranslucentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Glow
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> GlowOption { get; private set; }

        /// <summary>
        /// Whether the filament is glow-in-the-dark.
        /// </summary>
        /// <value>Whether the filament is glow-in-the-dark.</value>
        [JsonPropertyName("glow")]
        public bool? Glow { get { return this.GlowOption; } set { this.GlowOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalFilament {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  Density: ").Append(Density).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("  SpoolWeight: ").Append(SpoolWeight).Append("\n");
            sb.Append("  SpoolType: ").Append(SpoolType).Append("\n");
            sb.Append("  ColorHex: ").Append(ColorHex).Append("\n");
            sb.Append("  ColorHexes: ").Append(ColorHexes).Append("\n");
            sb.Append("  ExtruderTemp: ").Append(ExtruderTemp).Append("\n");
            sb.Append("  BedTemp: ").Append(BedTemp).Append("\n");
            sb.Append("  Finish: ").Append(Finish).Append("\n");
            sb.Append("  MultiColorDirection: ").Append(MultiColorDirection).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Translucent: ").Append(Translucent).Append("\n");
            sb.Append("  Glow: ").Append(Glow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExternalFilament" />
    /// </summary>
    public class ExternalFilamentJsonConverter : JsonConverter<ExternalFilament>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExternalFilament" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExternalFilament Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> manufacturer = default;
            Option<string?> name = default;
            Option<string?> material = default;
            Option<decimal?> density = default;
            Option<decimal?> weight = default;
            Option<decimal?> diameter = default;
            Option<decimal?> spoolWeight = default;
            Option<SpoolType?> spoolType = default;
            Option<string?> colorHex = default;
            Option<List<string>?> colorHexes = default;
            Option<int?> extruderTemp = default;
            Option<int?> bedTemp = default;
            Option<Finish?> finish = default;
            Option<SpoolmanExternaldbMultiColorDirection?> multiColorDirection = default;
            Option<Pattern?> pattern = default;
            Option<bool?> translucent = default;
            Option<bool?> glow = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "manufacturer":
                            manufacturer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "material":
                            material = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "density":
                            density = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "weight":
                            weight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "diameter":
                            diameter = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "spool_weight":
                            spoolWeight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "spool_type":
                            string? spoolTypeRawValue = utf8JsonReader.GetString();
                            if (spoolTypeRawValue != null)
                                spoolType = new Option<SpoolType?>(SpoolTypeValueConverter.FromStringOrDefault(spoolTypeRawValue));
                            break;
                        case "color_hex":
                            colorHex = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "color_hexes":
                            colorHexes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "extruder_temp":
                            extruderTemp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "bed_temp":
                            bedTemp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "finish":
                            string? finishRawValue = utf8JsonReader.GetString();
                            if (finishRawValue != null)
                                finish = new Option<Finish?>(FinishValueConverter.FromStringOrDefault(finishRawValue));
                            break;
                        case "multi_color_direction":
                            string? multiColorDirectionRawValue = utf8JsonReader.GetString();
                            if (multiColorDirectionRawValue != null)
                                multiColorDirection = new Option<SpoolmanExternaldbMultiColorDirection?>(SpoolmanExternaldbMultiColorDirectionValueConverter.FromStringOrDefault(multiColorDirectionRawValue));
                            break;
                        case "pattern":
                            string? patternRawValue = utf8JsonReader.GetString();
                            if (patternRawValue != null)
                                pattern = new Option<Pattern?>(PatternValueConverter.FromStringOrDefault(patternRawValue));
                            break;
                        case "translucent":
                            translucent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "glow":
                            glow = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ExternalFilament.", nameof(id));

            if (!manufacturer.IsSet)
                throw new ArgumentException("Property is required for class ExternalFilament.", nameof(manufacturer));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ExternalFilament.", nameof(name));

            if (!material.IsSet)
                throw new ArgumentException("Property is required for class ExternalFilament.", nameof(material));

            if (!density.IsSet)
                throw new ArgumentException("Property is required for class ExternalFilament.", nameof(density));

            if (!weight.IsSet)
                throw new ArgumentException("Property is required for class ExternalFilament.", nameof(weight));

            if (!diameter.IsSet)
                throw new ArgumentException("Property is required for class ExternalFilament.", nameof(diameter));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ExternalFilament.");

            if (manufacturer.IsSet && manufacturer.Value == null)
                throw new ArgumentNullException(nameof(manufacturer), "Property is not nullable for class ExternalFilament.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ExternalFilament.");

            if (material.IsSet && material.Value == null)
                throw new ArgumentNullException(nameof(material), "Property is not nullable for class ExternalFilament.");

            if (density.IsSet && density.Value == null)
                throw new ArgumentNullException(nameof(density), "Property is not nullable for class ExternalFilament.");

            if (weight.IsSet && weight.Value == null)
                throw new ArgumentNullException(nameof(weight), "Property is not nullable for class ExternalFilament.");

            if (diameter.IsSet && diameter.Value == null)
                throw new ArgumentNullException(nameof(diameter), "Property is not nullable for class ExternalFilament.");

            if (translucent.IsSet && translucent.Value == null)
                throw new ArgumentNullException(nameof(translucent), "Property is not nullable for class ExternalFilament.");

            if (glow.IsSet && glow.Value == null)
                throw new ArgumentNullException(nameof(glow), "Property is not nullable for class ExternalFilament.");

            return new ExternalFilament(id.Value!, manufacturer.Value!, name.Value!, material.Value!, density.Value!.Value!, weight.Value!.Value!, diameter.Value!.Value!, spoolWeight, spoolType, colorHex, colorHexes, extruderTemp, bedTemp, finish, multiColorDirection, pattern, translucent, glow);
        }

        /// <summary>
        /// Serializes a <see cref="ExternalFilament" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="externalFilament"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExternalFilament externalFilament, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, externalFilament, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExternalFilament" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="externalFilament"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExternalFilament externalFilament, JsonSerializerOptions jsonSerializerOptions)
        {
            if (externalFilament.Id == null)
                throw new ArgumentNullException(nameof(externalFilament.Id), "Property is required for class ExternalFilament.");

            if (externalFilament.Manufacturer == null)
                throw new ArgumentNullException(nameof(externalFilament.Manufacturer), "Property is required for class ExternalFilament.");

            if (externalFilament.Name == null)
                throw new ArgumentNullException(nameof(externalFilament.Name), "Property is required for class ExternalFilament.");

            if (externalFilament.Material == null)
                throw new ArgumentNullException(nameof(externalFilament.Material), "Property is required for class ExternalFilament.");

            writer.WriteString("id", externalFilament.Id);

            writer.WriteString("manufacturer", externalFilament.Manufacturer);

            writer.WriteString("name", externalFilament.Name);

            writer.WriteString("material", externalFilament.Material);

            writer.WriteNumber("density", externalFilament.Density);

            writer.WriteNumber("weight", externalFilament.Weight);

            writer.WriteNumber("diameter", externalFilament.Diameter);

            if (externalFilament.SpoolWeightOption.IsSet)
                if (externalFilament.SpoolWeightOption.Value != null)
                    writer.WriteNumber("spool_weight", externalFilament.SpoolWeightOption.Value!.Value);
                else
                    writer.WriteNull("spool_weight");

            if (externalFilament.SpoolTypeOption.IsSet)
                if (externalFilament.SpoolTypeOption!.Value != null)
                {
                    var spoolTypeRawValue = SpoolTypeValueConverter.ToJsonValue(externalFilament.SpoolTypeOption.Value!.Value);
                    writer.WriteString("spool_type", spoolTypeRawValue);
                }
                else
                    writer.WriteNull("spool_type");
            if (externalFilament.ColorHexOption.IsSet)
                if (externalFilament.ColorHexOption.Value != null)
                    writer.WriteString("color_hex", externalFilament.ColorHex);
                else
                    writer.WriteNull("color_hex");

            if (externalFilament.ColorHexesOption.IsSet)
                if (externalFilament.ColorHexesOption.Value != null)
                {
                    writer.WritePropertyName("color_hexes");
                    JsonSerializer.Serialize(writer, externalFilament.ColorHexes, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("color_hexes");
            if (externalFilament.ExtruderTempOption.IsSet)
                if (externalFilament.ExtruderTempOption.Value != null)
                    writer.WriteNumber("extruder_temp", externalFilament.ExtruderTempOption.Value!.Value);
                else
                    writer.WriteNull("extruder_temp");

            if (externalFilament.BedTempOption.IsSet)
                if (externalFilament.BedTempOption.Value != null)
                    writer.WriteNumber("bed_temp", externalFilament.BedTempOption.Value!.Value);
                else
                    writer.WriteNull("bed_temp");

            if (externalFilament.FinishOption.IsSet)
                if (externalFilament.FinishOption!.Value != null)
                {
                    var finishRawValue = FinishValueConverter.ToJsonValue(externalFilament.FinishOption.Value!.Value);
                    writer.WriteString("finish", finishRawValue);
                }
                else
                    writer.WriteNull("finish");
            if (externalFilament.MultiColorDirectionOption.IsSet)
                if (externalFilament.MultiColorDirectionOption!.Value != null)
                {
                    var multiColorDirectionRawValue = SpoolmanExternaldbMultiColorDirectionValueConverter.ToJsonValue(externalFilament.MultiColorDirectionOption.Value!.Value);
                    writer.WriteString("multi_color_direction", multiColorDirectionRawValue);
                }
                else
                    writer.WriteNull("multi_color_direction");
            if (externalFilament.PatternOption.IsSet)
                if (externalFilament.PatternOption!.Value != null)
                {
                    var patternRawValue = PatternValueConverter.ToJsonValue(externalFilament.PatternOption.Value!.Value);
                    writer.WriteString("pattern", patternRawValue);
                }
                else
                    writer.WriteNull("pattern");
            if (externalFilament.TranslucentOption.IsSet)
                writer.WriteBoolean("translucent", externalFilament.TranslucentOption.Value!.Value);

            if (externalFilament.GlowOption.IsSet)
                writer.WriteBoolean("glow", externalFilament.GlowOption.Value!.Value);
        }
    }
}
