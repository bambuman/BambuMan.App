// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using SpoolMan.Api.Client;

namespace SpoolMan.Api.Model
{
    /// <summary>
    /// Defines EntityType
    /// </summary>
    public enum EntityType
    {
        /// <summary>
        /// Enum Vendor for value: vendor
        /// </summary>
        vendor = 1,

        /// <summary>
        /// Enum Filament for value: filament
        /// </summary>
        filament = 2,

        /// <summary>
        /// Enum Spool for value: spool
        /// </summary>
        spool = 3
    }

    /// <summary>
    /// Converts <see cref="EntityType"/> to and from the JSON value
    /// </summary>
    public static class EntityTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="EntityType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EntityType FromString(string value)
        {
            if (value.Equals("vendor"))
                return EntityType.vendor;

            if (value.Equals("filament"))
                return EntityType.filament;

            if (value.Equals("spool"))
                return EntityType.spool;

            throw new NotImplementedException($"Could not convert value to type EntityType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="EntityType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EntityType? FromStringOrDefault(string value)
        {
            if (value.Equals("vendor"))
                return EntityType.vendor;

            if (value.Equals("filament"))
                return EntityType.filament;

            if (value.Equals("spool"))
                return EntityType.spool;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EntityType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(EntityType value)
        {
            if (value == EntityType.vendor)
                return "vendor";

            if (value == EntityType.filament)
                return "filament";

            if (value == EntityType.spool)
                return "spool";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EntityType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class EntityTypeJsonConverter : JsonConverter<EntityType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EntityType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EntityType? result = rawValue == null
                ? null
                : EntityTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EntityType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EntityType entityType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(entityType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EntityType"/>
    /// </summary>
    public class EntityTypeNullableJsonConverter : JsonConverter<EntityType?>
    {
        /// <summary>
        /// Returns a EntityType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EntityType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EntityType? result = rawValue == null
                ? null
                : EntityTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EntityType? entityType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(entityType?.ToString() ?? "null");
        }
    }
}
