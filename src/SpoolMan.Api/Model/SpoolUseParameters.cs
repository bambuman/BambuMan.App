// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using SpoolMan.Api.Client;

namespace SpoolMan.Api.Model
{
    /// <summary>
    /// SpoolUseParameters
    /// </summary>
    public partial class SpoolUseParameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpoolUseParameters" /> class.
        /// </summary>
        /// <param name="useLength">useLength</param>
        /// <param name="useWeight">useWeight</param>
        [JsonConstructor]
        public SpoolUseParameters(Option<decimal?> useLength = default, Option<decimal?> useWeight = default)
        {
            UseLengthOption = useLength;
            UseWeightOption = useWeight;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of UseLength
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> UseLengthOption { get; private set; }

        /// <summary>
        /// Gets or Sets UseLength
        /// </summary>
        [JsonPropertyName("use_length")]
        public decimal? UseLength { get { return this.UseLengthOption; } set { this.UseLengthOption = new(value); } }

        /// <summary>
        /// Used to track the state of UseWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> UseWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets UseWeight
        /// </summary>
        [JsonPropertyName("use_weight")]
        public decimal? UseWeight { get { return this.UseWeightOption; } set { this.UseWeightOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpoolUseParameters {\n");
            sb.Append("  UseLength: ").Append(UseLength).Append("\n");
            sb.Append("  UseWeight: ").Append(UseWeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SpoolUseParameters" />
    /// </summary>
    public class SpoolUseParametersJsonConverter : JsonConverter<SpoolUseParameters>
    {
        /// <summary>
        /// Deserializes json to <see cref="SpoolUseParameters" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SpoolUseParameters Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> useLength = default;
            Option<decimal?> useWeight = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "use_length":
                            useLength = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "use_weight":
                            useWeight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new SpoolUseParameters(useLength, useWeight);
        }

        /// <summary>
        /// Serializes a <see cref="SpoolUseParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SpoolUseParameters spoolUseParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, spoolUseParameters, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SpoolUseParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SpoolUseParameters spoolUseParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            if (spoolUseParameters.UseLengthOption.IsSet)
                if (spoolUseParameters.UseLengthOption.Value != null)
                    writer.WriteNumber("use_length", spoolUseParameters.UseLengthOption.Value!.Value);
                else
                    writer.WriteNull("use_length");

            if (spoolUseParameters.UseWeightOption.IsSet)
                if (spoolUseParameters.UseWeightOption.Value != null)
                    writer.WriteNumber("use_weight", spoolUseParameters.UseWeightOption.Value!.Value);
                else
                    writer.WriteNull("use_weight");
        }
    }
}
