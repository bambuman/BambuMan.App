// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using SpoolMan.Api.Client;

namespace SpoolMan.Api.Model
{
    /// <summary>
    /// Defines ExtraFieldType
    /// </summary>
    public enum ExtraFieldType
    {
        /// <summary>
        /// Enum Text for value: text
        /// </summary>
        Text = 1,

        /// <summary>
        /// Enum Integer for value: integer
        /// </summary>
        Integer = 2,

        /// <summary>
        /// Enum IntegerRange for value: integer_range
        /// </summary>
        IntegerRange = 3,

        /// <summary>
        /// Enum Float for value: float
        /// </summary>
        Float = 4,

        /// <summary>
        /// Enum FloatRange for value: float_range
        /// </summary>
        FloatRange = 5,

        /// <summary>
        /// Enum Datetime for value: datetime
        /// </summary>
        Datetime = 6,

        /// <summary>
        /// Enum Boolean for value: boolean
        /// </summary>
        Boolean = 7,

        /// <summary>
        /// Enum Choice for value: choice
        /// </summary>
        Choice = 8
    }

    /// <summary>
    /// Converts <see cref="ExtraFieldType"/> to and from the JSON value
    /// </summary>
    public static class ExtraFieldTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ExtraFieldType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ExtraFieldType FromString(string value)
        {
            if (value.Equals("text"))
                return ExtraFieldType.Text;

            if (value.Equals("integer"))
                return ExtraFieldType.Integer;

            if (value.Equals("integer_range"))
                return ExtraFieldType.IntegerRange;

            if (value.Equals("float"))
                return ExtraFieldType.Float;

            if (value.Equals("float_range"))
                return ExtraFieldType.FloatRange;

            if (value.Equals("datetime"))
                return ExtraFieldType.Datetime;

            if (value.Equals("boolean"))
                return ExtraFieldType.Boolean;

            if (value.Equals("choice"))
                return ExtraFieldType.Choice;

            throw new NotImplementedException($"Could not convert value to type ExtraFieldType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ExtraFieldType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ExtraFieldType? FromStringOrDefault(string value)
        {
            if (value.Equals("text"))
                return ExtraFieldType.Text;

            if (value.Equals("integer"))
                return ExtraFieldType.Integer;

            if (value.Equals("integer_range"))
                return ExtraFieldType.IntegerRange;

            if (value.Equals("float"))
                return ExtraFieldType.Float;

            if (value.Equals("float_range"))
                return ExtraFieldType.FloatRange;

            if (value.Equals("datetime"))
                return ExtraFieldType.Datetime;

            if (value.Equals("boolean"))
                return ExtraFieldType.Boolean;

            if (value.Equals("choice"))
                return ExtraFieldType.Choice;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ExtraFieldType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ExtraFieldType value)
        {
            if (value == ExtraFieldType.Text)
                return "text";

            if (value == ExtraFieldType.Integer)
                return "integer";

            if (value == ExtraFieldType.IntegerRange)
                return "integer_range";

            if (value == ExtraFieldType.Float)
                return "float";

            if (value == ExtraFieldType.FloatRange)
                return "float_range";

            if (value == ExtraFieldType.Datetime)
                return "datetime";

            if (value == ExtraFieldType.Boolean)
                return "boolean";

            if (value == ExtraFieldType.Choice)
                return "choice";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExtraFieldType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ExtraFieldTypeJsonConverter : JsonConverter<ExtraFieldType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ExtraFieldType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ExtraFieldType? result = rawValue == null
                ? null
                : ExtraFieldTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ExtraFieldType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extraFieldType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ExtraFieldType extraFieldType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(extraFieldType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExtraFieldType"/>
    /// </summary>
    public class ExtraFieldTypeNullableJsonConverter : JsonConverter<ExtraFieldType?>
    {
        /// <summary>
        /// Returns a ExtraFieldType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ExtraFieldType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ExtraFieldType? result = rawValue == null
                ? null
                : ExtraFieldTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extraFieldType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ExtraFieldType? extraFieldType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(extraFieldType?.ToString() ?? "null");
        }
    }
}
