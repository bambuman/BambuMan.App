// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using SpoolMan.Api.Client;

namespace SpoolMan.Api.Model
{
    /// <summary>
    /// Spool
    /// </summary>
    public partial class Spool : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Spool" /> class.
        /// </summary>
        /// <param name="id">Unique internal ID of this spool of filament.</param>
        /// <param name="registered">When the spool was registered in the database. UTC Timezone.</param>
        /// <param name="filament">The filament type of this spool.</param>
        /// <param name="usedWeight">Consumed weight of filament from the spool in grams.</param>
        /// <param name="usedLength">Consumed length of filament from the spool in millimeters.</param>
        /// <param name="archived">Whether this spool is archived and should not be used anymore.</param>
        /// <param name="extra">Extra fields for this spool. All values are JSON-encoded data. Query the /fields endpoint for more details about the fields.</param>
        /// <param name="firstUsed">firstUsed</param>
        /// <param name="lastUsed">lastUsed</param>
        /// <param name="price">price</param>
        /// <param name="remainingWeight">remainingWeight</param>
        /// <param name="initialWeight">initialWeight</param>
        /// <param name="spoolWeight">spoolWeight</param>
        /// <param name="remainingLength">remainingLength</param>
        /// <param name="location">location</param>
        /// <param name="lotNr">lotNr</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public Spool(int id, string registered, Filament filament, decimal usedWeight, decimal usedLength, bool archived, Dictionary<string, string> extra, Option<string?> firstUsed = default, Option<string?> lastUsed = default, Option<decimal?> price = default, Option<decimal?> remainingWeight = default, Option<decimal?> initialWeight = default, Option<decimal?> spoolWeight = default, Option<decimal?> remainingLength = default, Option<string?> location = default, Option<string?> lotNr = default, Option<string?> comment = default)
        {
            Id = id;
            Registered = registered;
            Filament = filament;
            UsedWeight = usedWeight;
            UsedLength = usedLength;
            Archived = archived;
            Extra = extra;
            FirstUsedOption = firstUsed;
            LastUsedOption = lastUsed;
            PriceOption = price;
            RemainingWeightOption = remainingWeight;
            InitialWeightOption = initialWeight;
            SpoolWeightOption = spoolWeight;
            RemainingLengthOption = remainingLength;
            LocationOption = location;
            LotNrOption = lotNr;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Unique internal ID of this spool of filament.
        /// </summary>
        /// <value>Unique internal ID of this spool of filament.</value>
        [JsonPropertyName("id")]
        public int Id { get; set; }

        /// <summary>
        /// When the spool was registered in the database. UTC Timezone.
        /// </summary>
        /// <value>When the spool was registered in the database. UTC Timezone.</value>
        [JsonPropertyName("registered")]
        public string Registered { get; set; }

        /// <summary>
        /// The filament type of this spool.
        /// </summary>
        /// <value>The filament type of this spool.</value>
        [JsonPropertyName("filament")]
        public Filament Filament { get; set; }

        /// <summary>
        /// Consumed weight of filament from the spool in grams.
        /// </summary>
        /// <value>Consumed weight of filament from the spool in grams.</value>
        [JsonPropertyName("used_weight")]
        public decimal UsedWeight { get; set; }

        /// <summary>
        /// Consumed length of filament from the spool in millimeters.
        /// </summary>
        /// <value>Consumed length of filament from the spool in millimeters.</value>
        [JsonPropertyName("used_length")]
        public decimal UsedLength { get; set; }

        /// <summary>
        /// Whether this spool is archived and should not be used anymore.
        /// </summary>
        /// <value>Whether this spool is archived and should not be used anymore.</value>
        [JsonPropertyName("archived")]
        public bool Archived { get; set; }

        /// <summary>
        /// Extra fields for this spool. All values are JSON-encoded data. Query the /fields endpoint for more details about the fields.
        /// </summary>
        /// <value>Extra fields for this spool. All values are JSON-encoded data. Query the /fields endpoint for more details about the fields.</value>
        [JsonPropertyName("extra")]
        public Dictionary<string, string> Extra { get; set; }

        /// <summary>
        /// Used to track the state of FirstUsed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstUsedOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstUsed
        /// </summary>
        [JsonPropertyName("first_used")]
        public string? FirstUsed { get { return this.FirstUsedOption; } set { this.FirstUsedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUsed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastUsedOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastUsed
        /// </summary>
        [JsonPropertyName("last_used")]
        public string? LastUsed { get { return this.LastUsedOption; } set { this.LastUsedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Price
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> PriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public decimal? Price { get { return this.PriceOption; } set { this.PriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of RemainingWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> RemainingWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets RemainingWeight
        /// </summary>
        [JsonPropertyName("remaining_weight")]
        public decimal? RemainingWeight { get { return this.RemainingWeightOption; } set { this.RemainingWeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of InitialWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> InitialWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets InitialWeight
        /// </summary>
        [JsonPropertyName("initial_weight")]
        public decimal? InitialWeight { get { return this.InitialWeightOption; } set { this.InitialWeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpoolWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> SpoolWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets SpoolWeight
        /// </summary>
        [JsonPropertyName("spool_weight")]
        public decimal? SpoolWeight { get { return this.SpoolWeightOption; } set { this.SpoolWeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of RemainingLength
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> RemainingLengthOption { get; private set; }

        /// <summary>
        /// Gets or Sets RemainingLength
        /// </summary>
        [JsonPropertyName("remaining_length")]
        public decimal? RemainingLength { get { return this.RemainingLengthOption; } set { this.RemainingLengthOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of LotNr
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LotNrOption { get; private set; }

        /// <summary>
        /// Gets or Sets LotNr
        /// </summary>
        [JsonPropertyName("lot_nr")]
        public string? LotNr { get { return this.LotNrOption; } set { this.LotNrOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Spool {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Registered: ").Append(Registered).Append("\n");
            sb.Append("  Filament: ").Append(Filament).Append("\n");
            sb.Append("  UsedWeight: ").Append(UsedWeight).Append("\n");
            sb.Append("  UsedLength: ").Append(UsedLength).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("  FirstUsed: ").Append(FirstUsed).Append("\n");
            sb.Append("  LastUsed: ").Append(LastUsed).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  RemainingWeight: ").Append(RemainingWeight).Append("\n");
            sb.Append("  InitialWeight: ").Append(InitialWeight).Append("\n");
            sb.Append("  SpoolWeight: ").Append(SpoolWeight).Append("\n");
            sb.Append("  RemainingLength: ").Append(RemainingLength).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LotNr: ").Append(LotNr).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UsedWeight (decimal) minimum
            if (this.UsedWeight < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for UsedWeight, must be a value greater than or equal to 0.", new [] { "UsedWeight" });
            }

            // UsedLength (decimal) minimum
            if (this.UsedLength < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for UsedLength, must be a value greater than or equal to 0.", new [] { "UsedLength" });
            }

            // Price (decimal) minimum
            if (this.PriceOption.IsSet && this.PriceOption.Value < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Price, must be a value greater than or equal to 0.", new [] { "Price" });
            }

            // RemainingWeight (decimal) minimum
            if (this.RemainingWeightOption.IsSet && this.RemainingWeightOption.Value < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for RemainingWeight, must be a value greater than or equal to 0.", new [] { "RemainingWeight" });
            }

            // InitialWeight (decimal) minimum
            if (this.InitialWeightOption.IsSet && this.InitialWeightOption.Value < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for InitialWeight, must be a value greater than or equal to 0.", new [] { "InitialWeight" });
            }

            // SpoolWeight (decimal) minimum
            if (this.SpoolWeightOption.IsSet && this.SpoolWeightOption.Value < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for SpoolWeight, must be a value greater than or equal to 0.", new [] { "SpoolWeight" });
            }

            // RemainingLength (decimal) minimum
            if (this.RemainingLengthOption.IsSet && this.RemainingLengthOption.Value < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for RemainingLength, must be a value greater than or equal to 0.", new [] { "RemainingLength" });
            }

            // Location (string) maxLength
            if (this.Location != null && this.Location.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Location, length must be less than 64.", new [] { "Location" });
            }

            // LotNr (string) maxLength
            if (this.LotNr != null && this.LotNr.Length > 64)
            {
                yield return new ValidationResult("Invalid value for LotNr, length must be less than 64.", new [] { "LotNr" });
            }

            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Comment, length must be less than 1024.", new [] { "Comment" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Spool" />
    /// </summary>
    public class SpoolJsonConverter : JsonConverter<Spool>
    {
        /// <summary>
        /// Deserializes json to <see cref="Spool" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Spool Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> registered = default;
            Option<Filament?> filament = default;
            Option<decimal?> usedWeight = default;
            Option<decimal?> usedLength = default;
            Option<bool?> archived = default;
            Option<Dictionary<string, string>?> extra = default;
            Option<string?> firstUsed = default;
            Option<string?> lastUsed = default;
            Option<decimal?> price = default;
            Option<decimal?> remainingWeight = default;
            Option<decimal?> initialWeight = default;
            Option<decimal?> spoolWeight = default;
            Option<decimal?> remainingLength = default;
            Option<string?> location = default;
            Option<string?> lotNr = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "registered":
                            registered = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "filament":
                            filament = new Option<Filament?>(JsonSerializer.Deserialize<Filament>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "used_weight":
                            usedWeight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "used_length":
                            usedLength = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "archived":
                            archived = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "extra":
                            extra = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "first_used":
                            firstUsed = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "last_used":
                            lastUsed = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "price":
                            price = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "remaining_weight":
                            remainingWeight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "initial_weight":
                            initialWeight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "spool_weight":
                            spoolWeight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "remaining_length":
                            remainingLength = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "lot_nr":
                            lotNr = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Spool.", nameof(id));

            if (!registered.IsSet)
                throw new ArgumentException("Property is required for class Spool.", nameof(registered));

            if (!filament.IsSet)
                throw new ArgumentException("Property is required for class Spool.", nameof(filament));

            if (!usedWeight.IsSet)
                throw new ArgumentException("Property is required for class Spool.", nameof(usedWeight));

            if (!usedLength.IsSet)
                throw new ArgumentException("Property is required for class Spool.", nameof(usedLength));

            if (!archived.IsSet)
                throw new ArgumentException("Property is required for class Spool.", nameof(archived));

            if (!extra.IsSet)
                throw new ArgumentException("Property is required for class Spool.", nameof(extra));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Spool.");

            if (registered.IsSet && registered.Value == null)
                throw new ArgumentNullException(nameof(registered), "Property is not nullable for class Spool.");

            if (filament.IsSet && filament.Value == null)
                throw new ArgumentNullException(nameof(filament), "Property is not nullable for class Spool.");

            if (usedWeight.IsSet && usedWeight.Value == null)
                throw new ArgumentNullException(nameof(usedWeight), "Property is not nullable for class Spool.");

            if (usedLength.IsSet && usedLength.Value == null)
                throw new ArgumentNullException(nameof(usedLength), "Property is not nullable for class Spool.");

            if (archived.IsSet && archived.Value == null)
                throw new ArgumentNullException(nameof(archived), "Property is not nullable for class Spool.");

            if (extra.IsSet && extra.Value == null)
                throw new ArgumentNullException(nameof(extra), "Property is not nullable for class Spool.");

            return new Spool(id.Value!.Value!, registered.Value!, filament.Value!, usedWeight.Value!.Value!, usedLength.Value!.Value!, archived.Value!.Value!, extra.Value!, firstUsed, lastUsed, price, remainingWeight, initialWeight, spoolWeight, remainingLength, location, lotNr, comment);
        }

        /// <summary>
        /// Serializes a <see cref="Spool" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="spool"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Spool spool, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, spool, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Spool" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="spool"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Spool spool, JsonSerializerOptions jsonSerializerOptions)
        {
            if (spool.Registered == null)
                throw new ArgumentNullException(nameof(spool.Registered), "Property is required for class Spool.");

            if (spool.Filament == null)
                throw new ArgumentNullException(nameof(spool.Filament), "Property is required for class Spool.");

            if (spool.Extra == null)
                throw new ArgumentNullException(nameof(spool.Extra), "Property is required for class Spool.");

            writer.WriteNumber("id", spool.Id);

            writer.WriteString("registered", spool.Registered);

            writer.WritePropertyName("filament");
            JsonSerializer.Serialize(writer, spool.Filament, jsonSerializerOptions);
            writer.WriteNumber("used_weight", spool.UsedWeight);

            writer.WriteNumber("used_length", spool.UsedLength);

            writer.WriteBoolean("archived", spool.Archived);

            writer.WritePropertyName("extra");
            JsonSerializer.Serialize(writer, spool.Extra, jsonSerializerOptions);
            if (spool.FirstUsedOption.IsSet)
                if (spool.FirstUsedOption.Value != null)
                    writer.WriteString("first_used", spool.FirstUsed);
                else
                    writer.WriteNull("first_used");

            if (spool.LastUsedOption.IsSet)
                if (spool.LastUsedOption.Value != null)
                    writer.WriteString("last_used", spool.LastUsed);
                else
                    writer.WriteNull("last_used");

            if (spool.PriceOption.IsSet)
                if (spool.PriceOption.Value != null)
                    writer.WriteNumber("price", spool.PriceOption.Value!.Value);
                else
                    writer.WriteNull("price");

            if (spool.RemainingWeightOption.IsSet)
                if (spool.RemainingWeightOption.Value != null)
                    writer.WriteNumber("remaining_weight", spool.RemainingWeightOption.Value!.Value);
                else
                    writer.WriteNull("remaining_weight");

            if (spool.InitialWeightOption.IsSet)
                if (spool.InitialWeightOption.Value != null)
                    writer.WriteNumber("initial_weight", spool.InitialWeightOption.Value!.Value);
                else
                    writer.WriteNull("initial_weight");

            if (spool.SpoolWeightOption.IsSet)
                if (spool.SpoolWeightOption.Value != null)
                    writer.WriteNumber("spool_weight", spool.SpoolWeightOption.Value!.Value);
                else
                    writer.WriteNull("spool_weight");

            if (spool.RemainingLengthOption.IsSet)
                if (spool.RemainingLengthOption.Value != null)
                    writer.WriteNumber("remaining_length", spool.RemainingLengthOption.Value!.Value);
                else
                    writer.WriteNull("remaining_length");

            if (spool.LocationOption.IsSet)
                if (spool.LocationOption.Value != null)
                    writer.WriteString("location", spool.Location);
                else
                    writer.WriteNull("location");

            if (spool.LotNrOption.IsSet)
                if (spool.LotNrOption.Value != null)
                    writer.WriteString("lot_nr", spool.LotNr);
                else
                    writer.WriteNull("lot_nr");

            if (spool.CommentOption.IsSet)
                if (spool.CommentOption.Value != null)
                    writer.WriteString("comment", spool.Comment);
                else
                    writer.WriteNull("comment");
        }
    }
}
