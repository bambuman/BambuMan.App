// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using SpoolMan.Api.Client;

namespace SpoolMan.Api.Model
{
    /// <summary>
    /// ExtraField
    /// </summary>
    public partial class ExtraField : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtraField" /> class.
        /// </summary>
        /// <param name="name">Nice name</param>
        /// <param name="fieldType">Type of the field</param>
        /// <param name="key">Unique key</param>
        /// <param name="entityType">Entity type this field is for</param>
        /// <param name="order">Order of the field (default to 0)</param>
        /// <param name="unit">unit</param>
        /// <param name="defaultValue">defaultValue</param>
        /// <param name="choices">choices</param>
        /// <param name="multiChoice">multiChoice</param>
        [JsonConstructor]
        public ExtraField(string name, ExtraFieldType fieldType, string key, EntityType entityType, Option<int?> order = default, Option<string?> unit = default, Option<string?> defaultValue = default, Option<List<string>?> choices = default, Option<bool?> multiChoice = default)
        {
            Name = name;
            FieldType = fieldType;
            Key = key;
            EntityType = entityType;
            OrderOption = order;
            UnitOption = unit;
            DefaultValueOption = defaultValue;
            ChoicesOption = choices;
            MultiChoiceOption = multiChoice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of the field
        /// </summary>
        /// <value>Type of the field</value>
        [JsonPropertyName("field_type")]
        public ExtraFieldType FieldType { get; set; }

        /// <summary>
        /// Entity type this field is for
        /// </summary>
        /// <value>Entity type this field is for</value>
        [JsonPropertyName("entity_type")]
        public EntityType EntityType { get; set; }

        /// <summary>
        /// Nice name
        /// </summary>
        /// <value>Nice name</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Unique key
        /// </summary>
        /// <value>Unique key</value>
        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OrderOption { get; private set; }

        /// <summary>
        /// Order of the field
        /// </summary>
        /// <value>Order of the field</value>
        [JsonPropertyName("order")]
        public int? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of Unit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UnitOption { get; private set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [JsonPropertyName("unit")]
        public string? Unit { get { return this.UnitOption; } set { this.UnitOption = new(value); } }

        /// <summary>
        /// Used to track the state of DefaultValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DefaultValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [JsonPropertyName("default_value")]
        public string? DefaultValue { get { return this.DefaultValueOption; } set { this.DefaultValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of Choices
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ChoicesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Choices
        /// </summary>
        [JsonPropertyName("choices")]
        public List<string>? Choices { get { return this.ChoicesOption; } set { this.ChoicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of MultiChoice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MultiChoiceOption { get; private set; }

        /// <summary>
        /// Gets or Sets MultiChoice
        /// </summary>
        [JsonPropertyName("multi_choice")]
        public bool? MultiChoice { get { return this.MultiChoiceOption; } set { this.MultiChoiceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtraField {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Choices: ").Append(Choices).Append("\n");
            sb.Append("  MultiChoice: ").Append(MultiChoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 128)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Key (string) maxLength
            if (this.Key != null && this.Key.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Key, length must be less than 64.", new [] { "Key" });
            }

            // Key (string) minLength
            if (this.Key != null && this.Key.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Key, length must be greater than 1.", new [] { "Key" });
            }

            if (this.Key != null) {
                // Key (string) pattern
                Regex regexKey = new Regex(@"^[a-z0-9_]+$", RegexOptions.CultureInvariant);

                if (!regexKey.Match(this.Key).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Key, must match a pattern of " + regexKey, new [] { "Key" });
                }
            }

            // Unit (string) maxLength
            if (this.Unit != null && this.Unit.Length > 16)
            {
                yield return new ValidationResult("Invalid value for Unit, length must be less than 16.", new [] { "Unit" });
            }

            // Unit (string) minLength
            if (this.Unit != null && this.Unit.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Unit, length must be greater than 1.", new [] { "Unit" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExtraField" />
    /// </summary>
    public class ExtraFieldJsonConverter : JsonConverter<ExtraField>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExtraField" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExtraField Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<ExtraFieldType?> fieldType = default;
            Option<string?> key = default;
            Option<EntityType?> entityType = default;
            Option<int?> order = default;
            Option<string?> unit = default;
            Option<string?> defaultValue = default;
            Option<List<string>?> choices = default;
            Option<bool?> multiChoice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "field_type":
                            string? fieldTypeRawValue = utf8JsonReader.GetString();
                            if (fieldTypeRawValue != null)
                                fieldType = new Option<ExtraFieldType?>(ExtraFieldTypeValueConverter.FromStringOrDefault(fieldTypeRawValue));
                            break;
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "entity_type":
                            string? entityTypeRawValue = utf8JsonReader.GetString();
                            if (entityTypeRawValue != null)
                                entityType = new Option<EntityType?>(EntityTypeValueConverter.FromStringOrDefault(entityTypeRawValue));
                            break;
                        case "order":
                            order = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "unit":
                            unit = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "default_value":
                            defaultValue = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "choices":
                            choices = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "multi_choice":
                            multiChoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ExtraField.", nameof(name));

            if (!fieldType.IsSet)
                throw new ArgumentException("Property is required for class ExtraField.", nameof(fieldType));

            if (!key.IsSet)
                throw new ArgumentException("Property is required for class ExtraField.", nameof(key));

            if (!entityType.IsSet)
                throw new ArgumentException("Property is required for class ExtraField.", nameof(entityType));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ExtraField.");

            if (fieldType.IsSet && fieldType.Value == null)
                throw new ArgumentNullException(nameof(fieldType), "Property is not nullable for class ExtraField.");

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class ExtraField.");

            if (entityType.IsSet && entityType.Value == null)
                throw new ArgumentNullException(nameof(entityType), "Property is not nullable for class ExtraField.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class ExtraField.");

            return new ExtraField(name.Value!, fieldType.Value!.Value!, key.Value!, entityType.Value!.Value!, order, unit, defaultValue, choices, multiChoice);
        }

        /// <summary>
        /// Serializes a <see cref="ExtraField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extraField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExtraField extraField, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, extraField, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExtraField" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extraField"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExtraField extraField, JsonSerializerOptions jsonSerializerOptions)
        {
            if (extraField.Name == null)
                throw new ArgumentNullException(nameof(extraField.Name), "Property is required for class ExtraField.");

            if (extraField.Key == null)
                throw new ArgumentNullException(nameof(extraField.Key), "Property is required for class ExtraField.");

            writer.WriteString("name", extraField.Name);

            var fieldTypeRawValue = ExtraFieldTypeValueConverter.ToJsonValue(extraField.FieldType);
            writer.WriteString("field_type", fieldTypeRawValue);

            writer.WriteString("key", extraField.Key);

            var entityTypeRawValue = EntityTypeValueConverter.ToJsonValue(extraField.EntityType);
            writer.WriteString("entity_type", entityTypeRawValue);

            if (extraField.OrderOption.IsSet)
                writer.WriteNumber("order", extraField.OrderOption.Value!.Value);

            if (extraField.UnitOption.IsSet)
                if (extraField.UnitOption.Value != null)
                    writer.WriteString("unit", extraField.Unit);
                else
                    writer.WriteNull("unit");

            if (extraField.DefaultValueOption.IsSet)
                if (extraField.DefaultValueOption.Value != null)
                    writer.WriteString("default_value", extraField.DefaultValue);
                else
                    writer.WriteNull("default_value");

            if (extraField.ChoicesOption.IsSet)
                if (extraField.ChoicesOption.Value != null)
                {
                    writer.WritePropertyName("choices");
                    JsonSerializer.Serialize(writer, extraField.Choices, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("choices");
            if (extraField.MultiChoiceOption.IsSet)
                if (extraField.MultiChoiceOption.Value != null)
                    writer.WriteBoolean("multi_choice", extraField.MultiChoiceOption.Value!.Value);
                else
                    writer.WriteNull("multi_choice");
        }
    }
}
