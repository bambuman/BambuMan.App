// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using SpoolMan.Api.Client;

namespace SpoolMan.Api.Model
{
    /// <summary>
    /// VendorParameters
    /// </summary>
    public partial class VendorParameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorParameters" /> class.
        /// </summary>
        /// <param name="name">Vendor name.</param>
        /// <param name="comment">comment</param>
        /// <param name="emptySpoolWeight">emptySpoolWeight</param>
        /// <param name="externalId">externalId</param>
        /// <param name="extra">extra</param>
        [JsonConstructor]
        public VendorParameters(string name, Option<string?> comment = default, Option<decimal?> emptySpoolWeight = default, Option<string?> externalId = default, Option<Dictionary<string, string>?> extra = default)
        {
            Name = name;
            CommentOption = comment;
            EmptySpoolWeightOption = emptySpoolWeight;
            ExternalIdOption = externalId;
            ExtraOption = extra;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Vendor name.
        /// </summary>
        /// <value>Vendor name.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmptySpoolWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> EmptySpoolWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmptySpoolWeight
        /// </summary>
        [JsonPropertyName("empty_spool_weight")]
        public decimal? EmptySpoolWeight { get { return this.EmptySpoolWeightOption; } set { this.EmptySpoolWeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [JsonPropertyName("external_id")]
        public string? ExternalId { get { return this.ExternalIdOption; } set { this.ExternalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Extra
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> ExtraOption { get; private set; }

        /// <summary>
        /// Gets or Sets Extra
        /// </summary>
        [JsonPropertyName("extra")]
        public Dictionary<string, string>? Extra { get { return this.ExtraOption; } set { this.ExtraOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VendorParameters {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  EmptySpoolWeight: ").Append(EmptySpoolWeight).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 64.", new [] { "Name" });
            }

            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Comment, length must be less than 1024.", new [] { "Comment" });
            }

            // EmptySpoolWeight (decimal) minimum
            if (this.EmptySpoolWeightOption.IsSet && this.EmptySpoolWeightOption.Value < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for EmptySpoolWeight, must be a value greater than or equal to 0.", new [] { "EmptySpoolWeight" });
            }

            // ExternalId (string) maxLength
            if (this.ExternalId != null && this.ExternalId.Length > 256)
            {
                yield return new ValidationResult("Invalid value for ExternalId, length must be less than 256.", new [] { "ExternalId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VendorParameters" />
    /// </summary>
    public class VendorParametersJsonConverter : JsonConverter<VendorParameters>
    {
        /// <summary>
        /// Deserializes json to <see cref="VendorParameters" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VendorParameters Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> comment = default;
            Option<decimal?> emptySpoolWeight = default;
            Option<string?> externalId = default;
            Option<Dictionary<string, string>?> extra = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "empty_spool_weight":
                            emptySpoolWeight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "external_id":
                            externalId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "extra":
                            extra = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class VendorParameters.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class VendorParameters.");

            return new VendorParameters(name.Value!, comment, emptySpoolWeight, externalId, extra);
        }

        /// <summary>
        /// Serializes a <see cref="VendorParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vendorParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VendorParameters vendorParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, vendorParameters, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VendorParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vendorParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VendorParameters vendorParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vendorParameters.Name == null)
                throw new ArgumentNullException(nameof(vendorParameters.Name), "Property is required for class VendorParameters.");

            writer.WriteString("name", vendorParameters.Name);

            if (vendorParameters.CommentOption.IsSet)
                if (vendorParameters.CommentOption.Value != null)
                    writer.WriteString("comment", vendorParameters.Comment);
                else
                    writer.WriteNull("comment");

            if (vendorParameters.EmptySpoolWeightOption.IsSet)
                if (vendorParameters.EmptySpoolWeightOption.Value != null)
                    writer.WriteNumber("empty_spool_weight", vendorParameters.EmptySpoolWeightOption.Value!.Value);
                else
                    writer.WriteNull("empty_spool_weight");

            if (vendorParameters.ExternalIdOption.IsSet)
                if (vendorParameters.ExternalIdOption.Value != null)
                    writer.WriteString("external_id", vendorParameters.ExternalId);
                else
                    writer.WriteNull("external_id");

            if (vendorParameters.ExtraOption.IsSet)
                if (vendorParameters.ExtraOption.Value != null)
                {
                    writer.WritePropertyName("extra");
                    JsonSerializer.Serialize(writer, vendorParameters.Extra, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("extra");
        }
    }
}
