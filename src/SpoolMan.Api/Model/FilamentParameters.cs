// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using SpoolMan.Api.Client;

namespace SpoolMan.Api.Model
{
    /// <summary>
    /// FilamentParameters
    /// </summary>
    public partial class FilamentParameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilamentParameters" /> class.
        /// </summary>
        /// <param name="density">The density of this filament in g/cm3.</param>
        /// <param name="diameter">The diameter of this filament in mm.</param>
        /// <param name="name">name</param>
        /// <param name="vendorId">vendorId</param>
        /// <param name="material">material</param>
        /// <param name="price">price</param>
        /// <param name="weight">weight</param>
        /// <param name="spoolWeight">spoolWeight</param>
        /// <param name="articleNumber">articleNumber</param>
        /// <param name="comment">comment</param>
        /// <param name="settingsExtruderTemp">settingsExtruderTemp</param>
        /// <param name="settingsBedTemp">settingsBedTemp</param>
        /// <param name="colorHex">colorHex</param>
        /// <param name="multiColorHexes">multiColorHexes</param>
        /// <param name="multiColorDirection">multiColorDirection</param>
        /// <param name="externalId">externalId</param>
        /// <param name="extra">extra</param>
        [JsonConstructor]
        public FilamentParameters(decimal density, decimal diameter, Option<string?> name = default, Option<int?> vendorId = default, Option<string?> material = default, Option<decimal?> price = default, Option<decimal?> weight = default, Option<decimal?> spoolWeight = default, Option<string?> articleNumber = default, Option<string?> comment = default, Option<int?> settingsExtruderTemp = default, Option<int?> settingsBedTemp = default, Option<string?> colorHex = default, Option<string?> multiColorHexes = default, Option<MultiColorDirectionInput?> multiColorDirection = default, Option<string?> externalId = default, Option<Dictionary<string, string>?> extra = default)
        {
            Density = density;
            Diameter = diameter;
            NameOption = name;
            VendorIdOption = vendorId;
            MaterialOption = material;
            PriceOption = price;
            WeightOption = weight;
            SpoolWeightOption = spoolWeight;
            ArticleNumberOption = articleNumber;
            CommentOption = comment;
            SettingsExtruderTempOption = settingsExtruderTemp;
            SettingsBedTempOption = settingsBedTemp;
            ColorHexOption = colorHex;
            MultiColorHexesOption = multiColorHexes;
            MultiColorDirectionOption = multiColorDirection;
            ExternalIdOption = externalId;
            ExtraOption = extra;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MultiColorDirection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MultiColorDirectionInput?> MultiColorDirectionOption { get; private set; }

        /// <summary>
        /// Gets or Sets MultiColorDirection
        /// </summary>
        [JsonPropertyName("multi_color_direction")]
        public MultiColorDirectionInput? MultiColorDirection { get { return this.MultiColorDirectionOption; } set { this.MultiColorDirectionOption = new(value); } }

        /// <summary>
        /// The density of this filament in g/cm3.
        /// </summary>
        /// <value>The density of this filament in g/cm3.</value>
        [JsonPropertyName("density")]
        public decimal Density { get; set; }

        /// <summary>
        /// The diameter of this filament in mm.
        /// </summary>
        /// <value>The diameter of this filament in mm.</value>
        [JsonPropertyName("diameter")]
        public decimal Diameter { get; set; }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of VendorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VendorIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets VendorId
        /// </summary>
        [JsonPropertyName("vendor_id")]
        public int? VendorId { get { return this.VendorIdOption; } set { this.VendorIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Material
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MaterialOption { get; private set; }

        /// <summary>
        /// Gets or Sets Material
        /// </summary>
        [JsonPropertyName("material")]
        public string? Material { get { return this.MaterialOption; } set { this.MaterialOption = new(value); } }

        /// <summary>
        /// Used to track the state of Price
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> PriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public decimal? Price { get { return this.PriceOption; } set { this.PriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Weight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> WeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [JsonPropertyName("weight")]
        public decimal? Weight { get { return this.WeightOption; } set { this.WeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpoolWeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> SpoolWeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets SpoolWeight
        /// </summary>
        [JsonPropertyName("spool_weight")]
        public decimal? SpoolWeight { get { return this.SpoolWeightOption; } set { this.SpoolWeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of ArticleNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ArticleNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ArticleNumber
        /// </summary>
        [JsonPropertyName("article_number")]
        public string? ArticleNumber { get { return this.ArticleNumberOption; } set { this.ArticleNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Used to track the state of SettingsExtruderTemp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SettingsExtruderTempOption { get; private set; }

        /// <summary>
        /// Gets or Sets SettingsExtruderTemp
        /// </summary>
        [JsonPropertyName("settings_extruder_temp")]
        public int? SettingsExtruderTemp { get { return this.SettingsExtruderTempOption; } set { this.SettingsExtruderTempOption = new(value); } }

        /// <summary>
        /// Used to track the state of SettingsBedTemp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SettingsBedTempOption { get; private set; }

        /// <summary>
        /// Gets or Sets SettingsBedTemp
        /// </summary>
        [JsonPropertyName("settings_bed_temp")]
        public int? SettingsBedTemp { get { return this.SettingsBedTempOption; } set { this.SettingsBedTempOption = new(value); } }

        /// <summary>
        /// Used to track the state of ColorHex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorHexOption { get; private set; }

        /// <summary>
        /// Gets or Sets ColorHex
        /// </summary>
        [JsonPropertyName("color_hex")]
        public string? ColorHex { get { return this.ColorHexOption; } set { this.ColorHexOption = new(value); } }

        /// <summary>
        /// Used to track the state of MultiColorHexes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MultiColorHexesOption { get; private set; }

        /// <summary>
        /// Gets or Sets MultiColorHexes
        /// </summary>
        [JsonPropertyName("multi_color_hexes")]
        public string? MultiColorHexes { get { return this.MultiColorHexesOption; } set { this.MultiColorHexesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [JsonPropertyName("external_id")]
        public string? ExternalId { get { return this.ExternalIdOption; } set { this.ExternalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Extra
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> ExtraOption { get; private set; }

        /// <summary>
        /// Gets or Sets Extra
        /// </summary>
        [JsonPropertyName("extra")]
        public Dictionary<string, string>? Extra { get { return this.ExtraOption; } set { this.ExtraOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilamentParameters {\n");
            sb.Append("  Density: ").Append(Density).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VendorId: ").Append(VendorId).Append("\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  SpoolWeight: ").Append(SpoolWeight).Append("\n");
            sb.Append("  ArticleNumber: ").Append(ArticleNumber).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  SettingsExtruderTemp: ").Append(SettingsExtruderTemp).Append("\n");
            sb.Append("  SettingsBedTemp: ").Append(SettingsBedTemp).Append("\n");
            sb.Append("  ColorHex: ").Append(ColorHex).Append("\n");
            sb.Append("  MultiColorHexes: ").Append(MultiColorHexes).Append("\n");
            sb.Append("  MultiColorDirection: ").Append(MultiColorDirection).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 64.", new [] { "Name" });
            }

            // Material (string) maxLength
            if (this.Material != null && this.Material.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Material, length must be less than 64.", new [] { "Material" });
            }

            // Price (decimal) minimum
            if (this.PriceOption.IsSet && this.PriceOption.Value < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for Price, must be a value greater than or equal to 0.", new [] { "Price" });
            }

            // SpoolWeight (decimal) minimum
            if (this.SpoolWeightOption.IsSet && this.SpoolWeightOption.Value < (decimal)0)
            {
                yield return new ValidationResult("Invalid value for SpoolWeight, must be a value greater than or equal to 0.", new [] { "SpoolWeight" });
            }

            // ArticleNumber (string) maxLength
            if (this.ArticleNumber != null && this.ArticleNumber.Length > 64)
            {
                yield return new ValidationResult("Invalid value for ArticleNumber, length must be less than 64.", new [] { "ArticleNumber" });
            }

            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Comment, length must be less than 1024.", new [] { "Comment" });
            }

            // SettingsExtruderTemp (int) minimum
            if (this.SettingsExtruderTempOption.IsSet && this.SettingsExtruderTempOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for SettingsExtruderTemp, must be a value greater than or equal to 0.", new [] { "SettingsExtruderTemp" });
            }

            // SettingsBedTemp (int) minimum
            if (this.SettingsBedTempOption.IsSet && this.SettingsBedTempOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for SettingsBedTemp, must be a value greater than or equal to 0.", new [] { "SettingsBedTemp" });
            }

            // ExternalId (string) maxLength
            if (this.ExternalId != null && this.ExternalId.Length > 256)
            {
                yield return new ValidationResult("Invalid value for ExternalId, length must be less than 256.", new [] { "ExternalId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FilamentParameters" />
    /// </summary>
    public class FilamentParametersJsonConverter : JsonConverter<FilamentParameters>
    {
        /// <summary>
        /// Deserializes json to <see cref="FilamentParameters" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FilamentParameters Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> density = default;
            Option<decimal?> diameter = default;
            Option<string?> name = default;
            Option<int?> vendorId = default;
            Option<string?> material = default;
            Option<decimal?> price = default;
            Option<decimal?> weight = default;
            Option<decimal?> spoolWeight = default;
            Option<string?> articleNumber = default;
            Option<string?> comment = default;
            Option<int?> settingsExtruderTemp = default;
            Option<int?> settingsBedTemp = default;
            Option<string?> colorHex = default;
            Option<string?> multiColorHexes = default;
            Option<MultiColorDirectionInput?> multiColorDirection = default;
            Option<string?> externalId = default;
            Option<Dictionary<string, string>?> extra = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "density":
                            density = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "diameter":
                            diameter = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "vendor_id":
                            vendorId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "material":
                            material = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "price":
                            price = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "weight":
                            weight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "spool_weight":
                            spoolWeight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "article_number":
                            articleNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "settings_extruder_temp":
                            settingsExtruderTemp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "settings_bed_temp":
                            settingsBedTemp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "color_hex":
                            colorHex = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "multi_color_hexes":
                            multiColorHexes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "multi_color_direction":
                            string? multiColorDirectionRawValue = utf8JsonReader.GetString();
                            if (multiColorDirectionRawValue != null)
                                multiColorDirection = new Option<MultiColorDirectionInput?>(MultiColorDirectionInputValueConverter.FromStringOrDefault(multiColorDirectionRawValue));
                            break;
                        case "external_id":
                            externalId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "extra":
                            extra = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!density.IsSet)
                throw new ArgumentException("Property is required for class FilamentParameters.", nameof(density));

            if (!diameter.IsSet)
                throw new ArgumentException("Property is required for class FilamentParameters.", nameof(diameter));

            if (density.IsSet && density.Value == null)
                throw new ArgumentNullException(nameof(density), "Property is not nullable for class FilamentParameters.");

            if (diameter.IsSet && diameter.Value == null)
                throw new ArgumentNullException(nameof(diameter), "Property is not nullable for class FilamentParameters.");

            return new FilamentParameters(density.Value!.Value!, diameter.Value!.Value!, name, vendorId, material, price, weight, spoolWeight, articleNumber, comment, settingsExtruderTemp, settingsBedTemp, colorHex, multiColorHexes, multiColorDirection, externalId, extra);
        }

        /// <summary>
        /// Serializes a <see cref="FilamentParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="filamentParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FilamentParameters filamentParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, filamentParameters, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FilamentParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="filamentParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FilamentParameters filamentParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("density", filamentParameters.Density);

            writer.WriteNumber("diameter", filamentParameters.Diameter);

            if (filamentParameters.NameOption.IsSet)
                if (filamentParameters.NameOption.Value != null)
                    writer.WriteString("name", filamentParameters.Name);
                else
                    writer.WriteNull("name");

            if (filamentParameters.VendorIdOption.IsSet)
                if (filamentParameters.VendorIdOption.Value != null)
                    writer.WriteNumber("vendor_id", filamentParameters.VendorIdOption.Value!.Value);
                else
                    writer.WriteNull("vendor_id");

            if (filamentParameters.MaterialOption.IsSet)
                if (filamentParameters.MaterialOption.Value != null)
                    writer.WriteString("material", filamentParameters.Material);
                else
                    writer.WriteNull("material");

            if (filamentParameters.PriceOption.IsSet)
                if (filamentParameters.PriceOption.Value != null)
                    writer.WriteNumber("price", filamentParameters.PriceOption.Value!.Value);
                else
                    writer.WriteNull("price");

            if (filamentParameters.WeightOption.IsSet)
                if (filamentParameters.WeightOption.Value != null)
                    writer.WriteNumber("weight", filamentParameters.WeightOption.Value!.Value);
                else
                    writer.WriteNull("weight");

            if (filamentParameters.SpoolWeightOption.IsSet)
                if (filamentParameters.SpoolWeightOption.Value != null)
                    writer.WriteNumber("spool_weight", filamentParameters.SpoolWeightOption.Value!.Value);
                else
                    writer.WriteNull("spool_weight");

            if (filamentParameters.ArticleNumberOption.IsSet)
                if (filamentParameters.ArticleNumberOption.Value != null)
                    writer.WriteString("article_number", filamentParameters.ArticleNumber);
                else
                    writer.WriteNull("article_number");

            if (filamentParameters.CommentOption.IsSet)
                if (filamentParameters.CommentOption.Value != null)
                    writer.WriteString("comment", filamentParameters.Comment);
                else
                    writer.WriteNull("comment");

            if (filamentParameters.SettingsExtruderTempOption.IsSet)
                if (filamentParameters.SettingsExtruderTempOption.Value != null)
                    writer.WriteNumber("settings_extruder_temp", filamentParameters.SettingsExtruderTempOption.Value!.Value);
                else
                    writer.WriteNull("settings_extruder_temp");

            if (filamentParameters.SettingsBedTempOption.IsSet)
                if (filamentParameters.SettingsBedTempOption.Value != null)
                    writer.WriteNumber("settings_bed_temp", filamentParameters.SettingsBedTempOption.Value!.Value);
                else
                    writer.WriteNull("settings_bed_temp");

            if (filamentParameters.ColorHexOption.IsSet)
                if (filamentParameters.ColorHexOption.Value != null)
                    writer.WriteString("color_hex", filamentParameters.ColorHex);
                else
                    writer.WriteNull("color_hex");

            if (filamentParameters.MultiColorHexesOption.IsSet)
                if (filamentParameters.MultiColorHexesOption.Value != null)
                    writer.WriteString("multi_color_hexes", filamentParameters.MultiColorHexes);
                else
                    writer.WriteNull("multi_color_hexes");

            if (filamentParameters.MultiColorDirectionOption.IsSet)
                if (filamentParameters.MultiColorDirectionOption!.Value != null)
                {
                    var multiColorDirectionRawValue = MultiColorDirectionInputValueConverter.ToJsonValue(filamentParameters.MultiColorDirectionOption.Value!.Value);
                    writer.WriteString("multi_color_direction", multiColorDirectionRawValue);
                }
                else
                    writer.WriteNull("multi_color_direction");
            if (filamentParameters.ExternalIdOption.IsSet)
                if (filamentParameters.ExternalIdOption.Value != null)
                    writer.WriteString("external_id", filamentParameters.ExternalId);
                else
                    writer.WriteNull("external_id");

            if (filamentParameters.ExtraOption.IsSet)
                if (filamentParameters.ExtraOption.Value != null)
                {
                    writer.WritePropertyName("extra");
                    JsonSerializer.Serialize(writer, filamentParameters.Extra, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("extra");
        }
    }
}
