// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using SpoolMan.Api.Client;

namespace SpoolMan.Api.Model
{
    /// <summary>
    /// ExternalMaterial
    /// </summary>
    public partial class ExternalMaterial : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalMaterial" /> class.
        /// </summary>
        /// <param name="material">material</param>
        /// <param name="density">density</param>
        /// <param name="extruderTemp">extruderTemp</param>
        /// <param name="bedTemp">bedTemp</param>
        [JsonConstructor]
        public ExternalMaterial(string material, decimal density, Option<int?> extruderTemp = default, Option<int?> bedTemp = default)
        {
            Material = material;
            Density = density;
            ExtruderTempOption = extruderTemp;
            BedTempOption = bedTemp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Material
        /// </summary>
        [JsonPropertyName("material")]
        public string Material { get; set; }

        /// <summary>
        /// Gets or Sets Density
        /// </summary>
        [JsonPropertyName("density")]
        public decimal Density { get; set; }

        /// <summary>
        /// Used to track the state of ExtruderTemp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExtruderTempOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtruderTemp
        /// </summary>
        [JsonPropertyName("extruder_temp")]
        public int? ExtruderTemp { get { return this.ExtruderTempOption; } set { this.ExtruderTempOption = new(value); } }

        /// <summary>
        /// Used to track the state of BedTemp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BedTempOption { get; private set; }

        /// <summary>
        /// Gets or Sets BedTemp
        /// </summary>
        [JsonPropertyName("bed_temp")]
        public int? BedTemp { get { return this.BedTempOption; } set { this.BedTempOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalMaterial {\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  Density: ").Append(Density).Append("\n");
            sb.Append("  ExtruderTemp: ").Append(ExtruderTemp).Append("\n");
            sb.Append("  BedTemp: ").Append(BedTemp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExternalMaterial" />
    /// </summary>
    public class ExternalMaterialJsonConverter : JsonConverter<ExternalMaterial>
    {
        /// <summary>
        /// Deserializes json to <see cref="ExternalMaterial" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ExternalMaterial Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> material = default;
            Option<decimal?> density = default;
            Option<int?> extruderTemp = default;
            Option<int?> bedTemp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "material":
                            material = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "density":
                            density = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "extruder_temp":
                            extruderTemp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "bed_temp":
                            bedTemp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!material.IsSet)
                throw new ArgumentException("Property is required for class ExternalMaterial.", nameof(material));

            if (!density.IsSet)
                throw new ArgumentException("Property is required for class ExternalMaterial.", nameof(density));

            if (material.IsSet && material.Value == null)
                throw new ArgumentNullException(nameof(material), "Property is not nullable for class ExternalMaterial.");

            if (density.IsSet && density.Value == null)
                throw new ArgumentNullException(nameof(density), "Property is not nullable for class ExternalMaterial.");

            return new ExternalMaterial(material.Value!, density.Value!.Value!, extruderTemp, bedTemp);
        }

        /// <summary>
        /// Serializes a <see cref="ExternalMaterial" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="externalMaterial"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ExternalMaterial externalMaterial, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, externalMaterial, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ExternalMaterial" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="externalMaterial"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ExternalMaterial externalMaterial, JsonSerializerOptions jsonSerializerOptions)
        {
            if (externalMaterial.Material == null)
                throw new ArgumentNullException(nameof(externalMaterial.Material), "Property is required for class ExternalMaterial.");

            writer.WriteString("material", externalMaterial.Material);

            writer.WriteNumber("density", externalMaterial.Density);

            if (externalMaterial.ExtruderTempOption.IsSet)
                if (externalMaterial.ExtruderTempOption.Value != null)
                    writer.WriteNumber("extruder_temp", externalMaterial.ExtruderTempOption.Value!.Value);
                else
                    writer.WriteNull("extruder_temp");

            if (externalMaterial.BedTempOption.IsSet)
                if (externalMaterial.BedTempOption.Value != null)
                    writer.WriteNumber("bed_temp", externalMaterial.BedTempOption.Value!.Value);
                else
                    writer.WriteNull("bed_temp");
        }
    }
}
