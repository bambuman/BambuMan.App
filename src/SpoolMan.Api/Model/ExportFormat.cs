// <auto-generated>
/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using SpoolMan.Api.Client;

namespace SpoolMan.Api.Model
{
    /// <summary>
    /// Defines ExportFormat
    /// </summary>
    public enum ExportFormat
    {
        /// <summary>
        /// Enum Csv for value: csv
        /// </summary>
        Csv = 1,

        /// <summary>
        /// Enum Json for value: json
        /// </summary>
        Json = 2
    }

    /// <summary>
    /// Converts <see cref="ExportFormat"/> to and from the JSON value
    /// </summary>
    public static class ExportFormatValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ExportFormat"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ExportFormat FromString(string value)
        {
            if (value.Equals("csv"))
                return ExportFormat.Csv;

            if (value.Equals("json"))
                return ExportFormat.Json;

            throw new NotImplementedException($"Could not convert value to type ExportFormat: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ExportFormat"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ExportFormat? FromStringOrDefault(string value)
        {
            if (value.Equals("csv"))
                return ExportFormat.Csv;

            if (value.Equals("json"))
                return ExportFormat.Json;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ExportFormat"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ExportFormat value)
        {
            if (value == ExportFormat.Csv)
                return "csv";

            if (value == ExportFormat.Json)
                return "json";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExportFormat"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ExportFormatJsonConverter : JsonConverter<ExportFormat>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ExportFormat Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ExportFormat? result = rawValue == null
                ? null
                : ExportFormatValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ExportFormat to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="exportFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ExportFormat exportFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(exportFormat.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ExportFormat"/>
    /// </summary>
    public class ExportFormatNullableJsonConverter : JsonConverter<ExportFormat?>
    {
        /// <summary>
        /// Returns a ExportFormat from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ExportFormat? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ExportFormat? result = rawValue == null
                ? null
                : ExportFormatValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="exportFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ExportFormat? exportFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(exportFormat?.ToString() ?? "null");
        }
    }
}
