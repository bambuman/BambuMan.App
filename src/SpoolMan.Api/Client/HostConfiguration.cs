/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using SpoolMan.Api.Api;
using SpoolMan.Api.Model;

namespace SpoolMan.Api.Client
{
    /// <summary>
    /// Provides hosting configuration for SpoolMan.Api
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new BackupResponseJsonConverter());
            _jsonOptions.Converters.Add(new EntityTypeJsonConverter());
            _jsonOptions.Converters.Add(new EntityTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new EventTypeJsonConverter());
            _jsonOptions.Converters.Add(new EventTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new ExportFormatJsonConverter());
            _jsonOptions.Converters.Add(new ExportFormatNullableJsonConverter());
            _jsonOptions.Converters.Add(new ExternalFilamentJsonConverter());
            _jsonOptions.Converters.Add(new ExternalMaterialJsonConverter());
            _jsonOptions.Converters.Add(new ExtraFieldJsonConverter());
            _jsonOptions.Converters.Add(new ExtraFieldParametersJsonConverter());
            _jsonOptions.Converters.Add(new ExtraFieldTypeJsonConverter());
            _jsonOptions.Converters.Add(new ExtraFieldTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new FilamentJsonConverter());
            _jsonOptions.Converters.Add(new FilamentEventJsonConverter());
            _jsonOptions.Converters.Add(new FilamentParametersJsonConverter());
            _jsonOptions.Converters.Add(new FilamentUpdateParametersJsonConverter());
            _jsonOptions.Converters.Add(new FinishJsonConverter());
            _jsonOptions.Converters.Add(new FinishNullableJsonConverter());
            _jsonOptions.Converters.Add(new HTTPValidationErrorJsonConverter());
            _jsonOptions.Converters.Add(new HealthCheckJsonConverter());
            _jsonOptions.Converters.Add(new InfoJsonConverter());
            _jsonOptions.Converters.Add(new MessageJsonConverter());
            _jsonOptions.Converters.Add(new MultiColorDirectionInputJsonConverter());
            _jsonOptions.Converters.Add(new MultiColorDirectionInputNullableJsonConverter());
            _jsonOptions.Converters.Add(new PatternJsonConverter());
            _jsonOptions.Converters.Add(new PatternNullableJsonConverter());
            _jsonOptions.Converters.Add(new RenameLocationBodyJsonConverter());
            _jsonOptions.Converters.Add(new SettingEventJsonConverter());
            _jsonOptions.Converters.Add(new SettingKVJsonConverter());
            _jsonOptions.Converters.Add(new SettingResponseJsonConverter());
            _jsonOptions.Converters.Add(new SettingTypeJsonConverter());
            _jsonOptions.Converters.Add(new SettingTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new SpoolJsonConverter());
            _jsonOptions.Converters.Add(new SpoolEventJsonConverter());
            _jsonOptions.Converters.Add(new SpoolMeasureParametersJsonConverter());
            _jsonOptions.Converters.Add(new SpoolParametersJsonConverter());
            _jsonOptions.Converters.Add(new SpoolTypeJsonConverter());
            _jsonOptions.Converters.Add(new SpoolTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new SpoolUpdateParametersJsonConverter());
            _jsonOptions.Converters.Add(new SpoolUseParametersJsonConverter());
            _jsonOptions.Converters.Add(new SpoolmanApiV1ModelsMultiColorDirectionJsonConverter());
            _jsonOptions.Converters.Add(new SpoolmanApiV1ModelsMultiColorDirectionNullableJsonConverter());
            _jsonOptions.Converters.Add(new SpoolmanExternaldbMultiColorDirectionJsonConverter());
            _jsonOptions.Converters.Add(new SpoolmanExternaldbMultiColorDirectionNullableJsonConverter());
            _jsonOptions.Converters.Add(new ValidationErrorJsonConverter());
            _jsonOptions.Converters.Add(new ValidationErrorLocInnerJsonConverter());
            _jsonOptions.Converters.Add(new VendorJsonConverter());
            _jsonOptions.Converters.Add(new VendorEventJsonConverter());
            _jsonOptions.Converters.Add(new VendorParametersJsonConverter());
            _jsonOptions.Converters.Add(new VendorUpdateParametersJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<DefaultApiEvents>();
            _services.AddTransient<IDefaultApi, DefaultApi>();
            _services.AddSingleton<ExportApiEvents>();
            _services.AddTransient<IExportApi, ExportApi>();
            _services.AddSingleton<ExternalApiEvents>();
            _services.AddTransient<IExternalApi, ExternalApi>();
            _services.AddSingleton<FieldApiEvents>();
            _services.AddTransient<IFieldApi, FieldApi>();
            _services.AddSingleton<FilamentApiEvents>();
            _services.AddTransient<IFilamentApi, FilamentApi>();
            _services.AddSingleton<OtherApiEvents>();
            _services.AddTransient<IOtherApi, OtherApi>();
            _services.AddSingleton<SettingApiEvents>();
            _services.AddTransient<ISettingApi, SettingApi>();
            _services.AddSingleton<SpoolApiEvents>();
            _services.AddTransient<ISpoolApi, SpoolApi>();
            _services.AddSingleton<VendorApiEvents>();
            _services.AddTransient<IVendorApi, VendorApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IDefaultApi, DefaultApi>(client));
            builders.Add(_services.AddHttpClient<IExportApi, ExportApi>(client));
            builders.Add(_services.AddHttpClient<IExternalApi, ExternalApi>(client));
            builders.Add(_services.AddHttpClient<IFieldApi, FieldApi>(client));
            builders.Add(_services.AddHttpClient<IFilamentApi, FilamentApi>(client));
            builders.Add(_services.AddHttpClient<IOtherApi, OtherApi>(client));
            builders.Add(_services.AddHttpClient<ISettingApi, SettingApi>(client));
            builders.Add(_services.AddHttpClient<ISpoolApi, SpoolApi>(client));
            builders.Add(_services.AddHttpClient<IVendorApi, VendorApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
