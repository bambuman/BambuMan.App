/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using SpoolMan.Api.Client;
using SpoolMan.Api.Api;
using SpoolMan.Api.Extensions;
using Xunit;

namespace SpoolMan.Api.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {

                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {

                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var defaultApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);

            var exportApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IExportApi>();
            Assert.True(exportApi.HttpClient.BaseAddress != null);

            var externalApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IExternalApi>();
            Assert.True(externalApi.HttpClient.BaseAddress != null);

            var fieldApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFieldApi>();
            Assert.True(fieldApi.HttpClient.BaseAddress != null);

            var filamentApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFilamentApi>();
            Assert.True(filamentApi.HttpClient.BaseAddress != null);

            var otherApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOtherApi>();
            Assert.True(otherApi.HttpClient.BaseAddress != null);

            var settingApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISettingApi>();
            Assert.True(settingApi.HttpClient.BaseAddress != null);

            var spoolApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISpoolApi>();
            Assert.True(spoolApi.HttpClient.BaseAddress != null);

            var vendorApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IVendorApi>();
            Assert.True(vendorApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var defaultApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);

            var exportApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IExportApi>();
            Assert.True(exportApi.HttpClient.BaseAddress != null);

            var externalApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IExternalApi>();
            Assert.True(externalApi.HttpClient.BaseAddress != null);

            var fieldApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFieldApi>();
            Assert.True(fieldApi.HttpClient.BaseAddress != null);

            var filamentApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFilamentApi>();
            Assert.True(filamentApi.HttpClient.BaseAddress != null);

            var otherApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOtherApi>();
            Assert.True(otherApi.HttpClient.BaseAddress != null);

            var settingApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISettingApi>();
            Assert.True(settingApi.HttpClient.BaseAddress != null);

            var spoolApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISpoolApi>();
            Assert.True(spoolApi.HttpClient.BaseAddress != null);

            var vendorApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IVendorApi>();
            Assert.True(vendorApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var defaultApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);
            
            var exportApi = _hostUsingAddWithAClient.Services.GetRequiredService<IExportApi>();
            Assert.True(exportApi.HttpClient.BaseAddress != null);
            
            var externalApi = _hostUsingAddWithAClient.Services.GetRequiredService<IExternalApi>();
            Assert.True(externalApi.HttpClient.BaseAddress != null);
            
            var fieldApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFieldApi>();
            Assert.True(fieldApi.HttpClient.BaseAddress != null);
            
            var filamentApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFilamentApi>();
            Assert.True(filamentApi.HttpClient.BaseAddress != null);
            
            var otherApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOtherApi>();
            Assert.True(otherApi.HttpClient.BaseAddress != null);
            
            var settingApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISettingApi>();
            Assert.True(settingApi.HttpClient.BaseAddress != null);
            
            var spoolApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISpoolApi>();
            Assert.True(spoolApi.HttpClient.BaseAddress != null);
            
            var vendorApi = _hostUsingAddWithAClient.Services.GetRequiredService<IVendorApi>();
            Assert.True(vendorApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var defaultApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);

            var exportApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IExportApi>();
            Assert.True(exportApi.HttpClient.BaseAddress != null);

            var externalApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IExternalApi>();
            Assert.True(externalApi.HttpClient.BaseAddress != null);

            var fieldApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFieldApi>();
            Assert.True(fieldApi.HttpClient.BaseAddress != null);

            var filamentApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFilamentApi>();
            Assert.True(filamentApi.HttpClient.BaseAddress != null);

            var otherApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOtherApi>();
            Assert.True(otherApi.HttpClient.BaseAddress != null);

            var settingApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISettingApi>();
            Assert.True(settingApi.HttpClient.BaseAddress != null);

            var spoolApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISpoolApi>();
            Assert.True(spoolApi.HttpClient.BaseAddress != null);

            var vendorApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IVendorApi>();
            Assert.True(vendorApi.HttpClient.BaseAddress != null);
        }
    }
}
