/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using SpoolMan.Api.Api;
using SpoolMan.Api.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace SpoolMan.Api.Test.Api
{
    /// <summary>
    ///  Class for testing SettingApi
    /// </summary>
    public sealed class SettingApiTests : ApiTestsBase
    {
        private readonly ISettingApi _instance;

        public SettingApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ISettingApi>();
        }

        /// <summary>
        /// Test GetAllSettingsSettingGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllSettingsSettingGetAsyncTest()
        {
            var response = await _instance.GetAllSettingsSettingGetAsync();
            var model = response.Ok();
            Assert.IsType<Dictionary<string, SettingResponse>>(model);
        }

        /// <summary>
        /// Test GetSettingSettingKeyGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSettingSettingKeyGetAsyncTest()
        {
            string key = default!;
            var response = await _instance.GetSettingSettingKeyGetAsync(key);
            var model = response.Ok();
            Assert.IsType<SettingResponse>(model);
        }

        /// <summary>
        /// Test SetSettingSettingKeyPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetSettingSettingKeyPostAsyncTest()
        {
            string key = default!;
            string body = default!;
            var response = await _instance.SetSettingSettingKeyPostAsync(key, body);
            var model = response.Ok();
            Assert.IsType<SettingResponse>(model);
        }
    }
}
